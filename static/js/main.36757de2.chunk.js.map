{"version":3,"sources":["components/Preloader/Preloader.module.css","serviceWorker.ts","state/types/action-types.ts","state/hooks.ts","components/Login/validators.ts","components/Login/FormsControls/FormsControls.tsx","components/Login/LoginForm.tsx","api/auth-api.ts","state/actions/auth-actions.ts","components/Login/Login.tsx","components/Login/LoginContainer.tsx","components/AddItemForm/AddItemForm.tsx","api/todolist-api.ts","state/actions/app-actions.ts","state/actions/todolist-actions.ts","components/EditableSpan/EditableSpan.tsx","api/task-api.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","components/MainTodoContainer/MainTodoContainer.tsx","components/Preloader/Preloader.tsx","App.tsx","state/reducers/tasks-reducer.ts","state/reducers/todolists-reducer.ts","state/reducers/app-reducer.ts","state/reducers/auth-reducer.ts","state/store.ts","index.tsx","components/Login/LoginForm.module.css","components/Login/FormsControls/FormsControls.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ACTIONS_TYPE","useAppSelector","useSelector","useDispatch","requiredField","value","undefined","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Input","restProps","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","email","Field","component","placeholder","name","validate","password","type","remember","formError","loginButton","apiKey","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","data","rememberMe","post","delete","SetAuthUserData","isAuth","SET_USER_DATA","payload","FetchAuthUserData","dispatch","INITIALIZATION_SUCCESS","resultCode","Login","loginBlock","formData","stopSubmit","_error","messages","LogIn","LoginContainer","AddItemForm","React","memo","addItemCallback","useState","tempTitle","setTempTitle","setError","onAddItem","trim","TextField","variant","size","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","todolistAPI","title","todolistId","put","SetAppStatus","status","SET_APP_STATUS","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitleAC","CHANGE_TODOLIST_TITLE","ChangeTodolistFilterAC","filter","CHANGE_TODOLIST_FILTER","EditableSpan","updateTitleCallback","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","taskAPI","taskId","RequestTaskObj","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","UpdateTask","domainModel","getState","task","find","t","id","apiModel","description","priority","startDate","deadline","Task","taskTitle","Checkbox","checked","useCallback","Number","RemoveTask","Delete","TaskContainer","state","tasksForTodolist","map","Todolist","todolistTitle","useEffect","items","FetchTasks","UpdateTodolistTitle","RemoveTodolist","item","ADD_TASK","AddTask","Button","TodolistContainer","todolists","SET_TODOLISTS","Grid","container","spacing","tl","Paper","style","padding","MainTodoContainer","auth","onAddTodolist","AddTodolist","Container","fixed","to","replace","Preloader","preloaderWrapper","loader","App","app","initializationSuccess","AppBar","position","Toolbar","display","justifyContent","edge","Menu","login","LinearProgress","path","element","initialState","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","addedDate","order","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,iBAAmB,oCAAoC,OAAS,0BAA0B,KAAO,wB,kICW/FC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBMC,E,8DCGCC,EAAsDC,I,GACdC,I,kCCJxCC,EAAgB,SAACC,GAAD,OAAmBA,OAAQC,EAAY,mBAAvC,E,6FCEhBC,EAAc,SAAC,GAAwC,EAAvCC,MAAwC,IAAjCC,EAAgC,EAAhCA,KAAgBC,GAAgB,EAA1BC,MAA0B,kBAC1DC,EAAWH,EAAKI,SAAWJ,EAAKK,MACtC,OACI,sBAAKC,UAAS,UAAKC,IAAEC,YAAP,YAAsBL,EAAWI,IAAEF,MAAQ,IAAzD,UACI,8BACKJ,EAAMQ,WAEVN,GAAY,+BAAOH,EAAKK,UAGpC,EAMYK,EAAQ,SAACT,GAClB,IAAOF,EAAoCE,EAApCF,MAAuBY,GAAaV,EAA7BD,KAA6BC,EAAvBC,MAApB,YAA2CD,EAA3C,IACA,OAAO,cAAC,EAAD,2BAAgBA,GAAhB,aAAuB,+CAAOK,UAAWC,IAAER,OAAWA,GAAUY,MAC1E,EC8BYC,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EAvCsC,SAACZ,GACjE,OACI,qBAAKK,UAAWC,IAAEK,eAAlB,SACI,uBAAMG,SAAUd,EAAMe,aAAtB,UACI,qBAAKV,UAAWC,IAAEU,MAAlB,SACI,cAACC,EAAA,EAAD,CACIC,UAAWT,EACXU,YAAY,QACZC,KAAK,QACLC,SAAU,CAAC3B,OAGnB,qBAAKW,UAAWC,IAAEgB,SAAlB,SACI,cAACL,EAAA,EAAD,CACIC,UAAWT,EACXU,YAAY,WACZC,KAAK,WACLG,KAAK,WACLF,SAAU,CAAC3B,OAGnB,sBAAKW,UAAWC,IAAEkB,SAAlB,UACI,cAACP,EAAA,EAAD,CACIC,UAAWT,EACXc,KAAK,WACLH,KAAK,eAJb,kBAQIpB,EAAMI,OAAS,qBAAKC,UAAWC,IAAEmB,UAAlB,SAA8BzB,EAAMI,QAEvD,qBAAKC,UAAWC,IAAEoB,YAAlB,SACI,mDAKnB,I,iCJjDWpC,K,8BAAAA,E,gDAAAA,E,gCAAAA,E,0BAAAA,E,oBAAAA,E,0BAAAA,E,sBAAAA,E,kCAAAA,E,4BAAAA,E,8CAAAA,E,gDAAAA,E,+BAAAA,M,0BKECqC,EAAS,uCAETC,EAAWC,IAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAWN,KAINO,EAAU,WAEf,OAAON,EAASO,IAAT,WAAwBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,IAAR,GAC1C,EAHQJ,EAAU,SAIblB,EAAeM,GAAgD,IAA9BiB,EAA6B,wDAChE,OAAOX,EAASY,KAAT,aAA4B,CAACxB,QAAOM,WAAUiB,eAAaH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,IAAR,GAC7E,EANQJ,EAAU,WAQf,OAAON,EAASa,OAAT,cAA8BL,MAAK,SAAAC,GAAG,OAAIA,EAAIC,IAAR,GAChD,EChBQI,EAAkB,SAACJ,EAAiBK,GAAlB,MAAqD,CAChFpB,KAAMjC,EAAasD,cACnBC,QAAS,CAACP,OAAMK,UAFW,EAUlBG,EAAoB,WAC7B,wDAAO,WAAOC,GAAP,iGACgBb,IADhB,OACGI,EADH,OAEHS,EARqD,CACzDxB,KAAMjC,EAAa0D,yBAQK,IAApBV,EAAKW,YAAoBF,EAASL,EAAgBJ,EAAKA,MAAM,IAH1D,2CAAP,qDAKH,ECdYY,EAAQ,WACjB,IAAMH,EAAWtD,cAKjB,OACI,sBAAKY,UAAWC,IAAE6C,WAAlB,UACI,gCACI,0CADJ,uBAEI,8BAAG,6CAAH,mBAEJ,yCACA,cAACxC,EAAD,CAAgBG,SAXP,SAACsC,GACdL,EDaa,SAAC/B,EAAeM,GAA8D,IAA5CiB,EAA2C,wDAC9F,wDAAO,WAAOQ,GAAP,iGACgBb,EAAclB,EAAOM,EAAUiB,GAD/C,UAEiB,KADdD,EADH,QAEEW,WAFF,gCAGSF,EAASD,KAHlB,6BAIGC,EAASM,YAAW,QAAS,CAACC,OAAQhB,EAAKiB,YAJ9C,2CAAP,qDAMH,CCpBgBC,CAAMJ,EAASpC,MAAOoC,EAAS9B,SAAU8B,EAASb,YAC9D,MAYJ,ECpBYkB,EAAiB,WAE1B,OACI,cAAC,EAAD,GAEP,E,mDCCYC,EAAcC,IAAMC,MAAK,YAAgC,IAA9BC,EAA6B,EAA7BA,gBACpC,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BF,mBAAwB,MAAlD,mBAAO1D,EAAP,KAAc6D,EAAd,KAEMC,EAAY,WACW,KAArBH,EAAUI,QACVN,EAAgBE,GAChBC,EAAa,KAEbC,EAAS,oBAEhB,EASD,OACI,gCACI,cAACG,EAAA,EAAD,CACIC,QAAQ,WACRC,KAAK,QACLC,MAAM,QACN5E,MAAOoE,EACP3D,QAASA,EACToE,WAAYpE,EACZqE,SAjBY,SAACC,GACrBV,EAAaU,EAAEC,cAAchF,MAChC,EAgBWiF,WAfc,SAACF,GACb,OAAVtE,GAAkB6D,EAAS,MACZ,KAAfS,EAAEG,UAAmBX,GACxB,IAeO,cAACY,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,EAArC,SACI,cAACe,EAAA,EAAD,QAIf,IChCYrD,EAAWC,IAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAWN,KAINuD,EAAc,WAEnB,OAAOtD,EAASO,IAAT,aACV,EAHQ+C,GAAc,SAIRC,GACX,OAAOvD,EAASY,KAAT,aAAgE,CAAC2C,SAC3E,EANQD,GAAc,SAORE,EAAoBD,GAC/B,OAAOvD,EAASyD,IAAT,qBAA+DD,GAAc,CAACD,SACxF,EATQD,GAAc,SAURE,GACX,OAAOxD,EAASa,OAAT,qBAAgD2C,GAC1D,EC/BQE,GAAe,SAACC,GAAD,MAA+C,CACvEhE,KAAMjC,EAAakG,eACnB3C,QAAS,CAAC0C,UAFc,ECQfE,GAAmB,SAACL,GAC7B,MAAO,CACH7D,KAAMjC,EAAaoG,gBACnB7C,QAAS,CAACuC,cAEjB,EACYO,GAAgB,SAACP,EAAoBD,GAC9C,MAAO,CACH5D,KAAMjC,EAAasG,aACnB/C,QAAS,CAACuC,aAAYD,SAE7B,EACYU,GAAwB,SAACT,EAAoBD,GACtD,MAAO,CACH5D,KAAMjC,EAAawG,sBACnBjD,QAAS,CAACuC,aAAYD,SAE7B,EACYY,GAAyB,SAACX,EAAoBY,GACvD,MAAO,CACHzE,KAAMjC,EAAa2G,uBACnBpD,QAAS,CAACuC,aAAYY,UAE7B,E,UC3BYE,GAAevC,IAAMC,MAAK,YAA2C,IAAzCuB,EAAwC,EAAxCA,MAAOgB,EAAiC,EAAjCA,oBAC5C,EAAgCrC,oBAAS,GAAzC,mBAAOsC,EAAP,KAAiBC,EAAjB,KACA,EAAkCvC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAwBA,OACIoC,EAEI,cAAChC,EAAA,EAAD,CACIE,KAAK,QACL3E,MAAOoE,EACPU,SAlBiB,SAACC,GAC1BV,EAAaU,EAAEC,cAAchF,MAChC,EAiBW2G,OAzBa,WACrBD,GAAY,GACRtC,IAAcoB,GACdgB,EAAoBpC,EAE3B,EAqBWwC,WAAS,EACT3B,WAlBc,SAACF,GACJ,KAAfA,EAAEG,WACFwB,GAAY,GACZF,EAAoBpC,GAG3B,IAcS,sBAAMyC,cAjCS,WACrBH,GAAY,GACZrC,EAAamB,EAChB,EA8BS,SAAwCA,GAErD,I,oBClCYvD,GAAWC,IAAMC,OAAO,CACjCC,iBAAiB,EACjBC,QAAS,gDACTC,QAAS,CACL,UAAWN,KAIN8E,GAAU,SACVrB,GACL,OAAOxD,GAASO,IAAT,qBAA8CiD,EAA9C,UACV,EAHQqB,GAAU,SAIRrB,EAAoBsB,GAC3B,OAAO9E,GAASa,OAAT,qBAA6C2C,EAA7C,kBAAiEsB,GAC3E,EANQD,GAAU,SAORrB,EAAoBD,GAC3B,OAAOvD,GAASY,KAAT,qBAA8C4C,EAA9C,UAAkE,CAACD,SAC7E,EATQsB,GAAU,SAURrB,EAAoBsB,EAAgBC,GAC3C,OAAO/E,GAASyD,IAAT,qBAA6CD,EAA7C,kBAAiEsB,GAAUC,EACrF,EClBQC,GAAe,SAACxB,EAAoBsB,GAC7C,MAAO,CACHnF,KAAMjC,EAAauH,YACnBhE,QAAS,CAACuC,aAAYsB,UAE7B,EAOYI,GAAe,SAAC1B,EAAoBsB,EAAgBK,GAC7D,MAAO,CACHxF,KAAMjC,EAAa0H,YACnBnE,QAAS,CAACuC,aAAYsB,SAAQK,SAErC,EACYE,GAAa,SAAC7B,EAAoB8B,GAC3C,MAAO,CACH3F,KAAMjC,EAAa6H,UACnBtE,QAAS,CAACuC,aAAY8B,SAE7B,EA2BYE,GAAa,SAAChC,EAAoBsB,EAAgBW,GAC3D,wDAAO,WAAOtE,EAAUuE,GAAjB,sFACHvE,EAASuC,GAAa,YAChBiC,EAAOD,IAAWJ,MAAM9B,GAAYoC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOhB,CAAb,IAF7C,wDAMGiB,EANH,aAOCxC,MAAOoC,EAAKpC,MACZyC,YAAaL,EAAKK,YAClBrC,OAAQgC,EAAKhC,OACbsC,SAAUN,EAAKM,SACfC,UAAWP,EAAKO,UAChBC,SAAUR,EAAKQ,UACZV,GAbJ,SAegBZ,GAAmBrB,EAAYsB,EAAQiB,GAfvD,OAgBa,MAhBb,OAgBEpC,QAAkBxC,EAAS+D,GAAa1B,EAAYsB,EAAQiB,IACjE5E,EAASuC,GAAa,cAjBnB,4CAAP,uDAmBH,ECvEY0C,GAAOrE,IAAMC,MAAK,YAAsD,IAApDwB,EAAmD,EAAnDA,WAAYsB,EAAuC,EAAvCA,OAAQuB,EAA+B,EAA/BA,UAAW1C,EAAoB,EAApBA,OACtDxC,EAAWtD,cAEjB,OAAO,sBAEHY,UAAWkF,EAAS,UAAY,GAF7B,UAGH,cAAC2C,GAAA,EAAD,CACInD,MAAM,UACNoD,QAASlJ,QAAQsG,GACjBd,SAAU2D,uBAAY,WAClBrF,EAASqE,GAAWhC,EAAYsB,EAAO,CAACnB,OAAQ8C,QAAQpJ,QAAQsG,MACnE,GAAE,CAACxC,EAAUqC,EAAYsB,EAAQnB,MAEtC,cAACW,GAAD,CACIf,MAAO8C,EACP9B,oBAAqBiC,uBAAY,SAACjD,GAC9BpC,EAASqE,GAAWhC,EAAYsB,EAAQ,CAACvB,MAAOA,IACnD,GAAE,CAACpC,EAAUqC,EAAYsB,MAC9B,cAAC5B,EAAA,EAAD,CACIE,QAASoD,uBAAY,WACjBrF,EDeU,SAACqC,EAAoBsB,GAC3C,wDAAO,WAAO3D,GAAP,kFACHA,EAASuC,GAAa,YADnB,SAEgBmB,GAAmBrB,EAAYsB,GAF/C,OAGa,MAHb,OAGEnB,QAAkBxC,EAAS6D,GAAaxB,EAAYsB,IACzD3D,EAASuC,GAAa,cAJnB,2CAAP,qDAMH,CCtBwBgD,CAAWlD,EAAYsB,GACnC,GAAE,CAAC3D,EAAUqC,EAAYsB,IAH9B,SAII,cAAC6B,GAAA,EAAD,QAlBC7B,EAqBZ,IC9BY8B,GAAgB7E,IAAMC,MAAK,YAAmC,IAAjCwB,EAAgC,EAAhCA,WAAYY,EAAoB,EAApBA,OAC5CkB,EAAQ3H,GAAe,SAAAkJ,GAAK,OAAIA,EAAMvB,KAAV,IAE9BwB,EAAmBxB,EAAM9B,GAI7B,MAHe,WAAXY,IAAqB0C,EAAmBxB,EAAM9B,GAAYY,QAAO,SAAAyB,GAAC,OAAKxI,QAAQwI,EAAElC,OAAf,KACvD,cAAXS,IAAwB0C,EAAmBxB,EAAM9B,GAAYY,QAAO,SAAAyB,GAAC,OAAIxI,QAAQwI,EAAElC,OAAd,KAGrE,8BAEQmD,EAAiBC,KAAI,SAAApB,GAAI,OACrB,cAACS,GAAD,CAEI5C,WAAYA,EACZsB,OAAQa,EAAKG,GACbO,UAAWV,EAAKpC,MAChBI,OAAQgC,EAAKhC,QAJRgC,EAAKG,GAFO,KAYxC,ICbYkB,GAAWjF,IAAMC,MAAK,YAAkD,IAAhDwB,EAA+C,EAA/CA,WAAYyD,EAAmC,EAAnCA,cAAe7C,EAAoB,EAApBA,OACtDjD,EAAWtD,cAMjB,OAJAqJ,qBAAU,WACN/F,EHmBkB,SAACqC,GACvB,wDAAO,WAAOrC,GAAP,wFACHA,EAASuC,GAAa,YADnB,SAEgBmB,GAAiBrB,GAFjC,OAGa,OADV9C,EAFH,QAGEiD,QAAkBxC,EAASkE,GAAW7B,EAAY9C,EAAKA,KAAKyG,QACjEhG,EAASuC,GAAa,cAJnB,2CAAP,qDAMH,CG1BgB0D,CAAW5D,GACvB,GAAE,IAGC,qBAAK/E,UAAU,MAAf,SACI,gCACI,8BACI,+BACI,cAAC6F,GAAD,CACIf,MAAO0D,EACP1C,oBAAqBiC,uBAAY,SAACjD,GAC9BpC,ENkCG,SAACqC,EAAoBD,GACpD,wDAAO,WAAOpC,GAAP,kFACHA,EAASuC,GAAa,YADnB,SAEgBJ,GAA2BE,EAAYD,GAFvD,OAGa,MAHb,OAGEI,QAAkBxC,EAAS8C,GAAsBT,EAAYD,IAClEpC,EAASuC,GAAa,cAJnB,2CAAP,qDAMH,CMzCwC2D,CAAoB7D,EAAYD,GAC5C,GAAE,CAACpC,EAAUqC,MAElB,cAACN,EAAA,EAAD,CACIE,QAASoD,uBAAY,WACjBrF,ENaF,SAACqC,GAC3B,wDAAO,WAAOrC,GAAP,kFACHA,EAASuC,GAAa,YADnB,SAEgBJ,GAA2BE,GAF3C,OAGa,MAHb,OAGEG,QAAkBxC,EAAS0C,GAAiBL,IACjDrC,EAASuC,GAAa,cAJnB,2CAAP,qDAMH,CMpBwC4D,CAAe9D,GAC3B,GAAE,CAACrC,EAAUqC,IAHlB,SAKI,cAACmD,GAAA,EAAD,WAIZ,8BACI,cAAC7E,EAAD,CAAaG,gBAAiBuE,uBAAY,SAACjD,GACvCpC,EHUD,SAACqC,EAAoBD,GACxC,wDAAO,WAAOpC,GAAP,wFACHA,EAASuC,GAAa,YADnB,SAEgBmB,GAAmBrB,EAAYD,GAF/C,OAGa,OADV7C,EAFH,QAGEiD,QAAkBxC,GAxCLwE,EAwCwBjF,EAAKA,KAAKA,KAAK6G,KAvCtD,CACH5H,KAAMjC,EAAa8J,SACnBvG,QAAS,CAAC0E,WAsCVxE,EAASuC,GAAa,cAJnB,iCArCc,IAACiC,CAqCf,UAAP,qDAMH,CGjBgC8B,CAAQjE,EAAYD,GAChC,GAAE,CAACpC,EAAUqC,QAGlB,8BACI,cAACoD,GAAD,CAAepD,WAAYA,EAAYY,OAAQA,MAEnD,gCACI,cAACsD,EAAA,EAAD,CACItE,QAASoD,uBAAY,WACjBrF,EAASgD,GAAuBX,EAAY,OAC/C,GAAE,CAACrC,EAAUqC,IACd/E,UAAsB,QAAX2F,EAAmB,gBAAkB,GAChD3B,QAAoB,QAAX2B,EAAmB,YAAc,WAC1C1B,KAAK,QACLS,MAAM,UAPV,iBAUA,cAACuE,EAAA,EAAD,CACItE,QAASoD,uBAAY,WACjBrF,EAASgD,GAAuBX,EAAY,UAC/C,GAAE,CAACrC,EAAUqC,IACd/E,UAAsB,WAAX2F,EAAsB,gBAAkB,GACnD3B,QAAoB,WAAX2B,EAAsB,YAAc,WAC7C1B,KAAK,QACLS,MAAM,UAPV,oBAUA,cAACuE,EAAA,EAAD,CACItE,QAASoD,uBAAY,WACjBrF,EAASgD,GAAuBX,EAAY,aAC/C,GAAE,CAACrC,EAAUqC,IACd/E,UAAsB,cAAX2F,EAAyB,gBAAkB,GACtD3B,QAAoB,cAAX2B,EAAyB,YAAc,WAChD1B,KAAK,QACLS,MAAM,UAPV,8BAcnB,IClFYwE,GAAoB5F,IAAMC,MAAK,WACxC,IAAM4F,EAAYjK,GAAe,SAAAkJ,GAAK,OAAIA,EAAMe,SAAV,IAChCzG,EAAWtD,cAMjB,OAJAqJ,qBAAU,WACN/F,EPgCJ,iDAAO,WAAOA,GAAP,wFACHA,EAASuC,GAAa,YADnB,SAEgBJ,IAFhB,OAGa,OADV5C,EAFH,QAGEiD,QAAkBxC,GAXAyG,EAWwBlH,EAAKA,KAVjD,CACHf,KAAMjC,EAAamK,cACnB5G,QAAS,CAAC2G,gBASVzG,EAASuC,GAAa,cAJnB,iCARmB,IAACkE,CAQpB,UAAP,sDO/BC,GAAE,IAGC,cAACE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SAEQJ,EAAUb,KAAI,SAAAkB,GACV,OACI,cAACH,EAAA,EAAD,CAAMP,MAAI,EAAV,SACI,cAACW,GAAA,EAAD,CAAOC,MAAO,CAACC,QAAS,QAAxB,SACI,cAACpB,GAAD,CAEIxD,WAAYyE,EAAGnC,GACfmB,cAAegB,EAAG1E,MAClBa,OAAQ6D,EAAG7D,QAHN6D,EAAGnC,OAHJmC,EAAGnC,GAW1B,KAIhB,IC1BYuC,GAAoB,WAC7B,IAAOtH,EAAUpD,GAAe,SAAAkJ,GAAK,OAAIA,EAAMyB,IAAV,IAA9BvH,OACDI,EAAWtD,cAEX0K,EAAgB/B,uBAAY,SAACjD,GAC/BpC,ER6CmB,SAACoC,GACxB,wDAAO,WAAOpC,GAAP,wFACHA,EAASuC,GAAa,YADnB,SAEgBJ,GAA2BC,GAF3C,OAGa,OADV7C,EAFH,QAGEiD,QAAkBxC,EAAS4C,GAAcrD,EAAKA,KAAKA,KAAK6G,KAAKzB,GAAIvC,IACtEpC,EAASuC,GAAa,cAJnB,2CAAP,qDAMH,CQpDgB8E,CAAYjF,GACxB,GAAE,CAACpC,IAEJ,OAAOJ,EACH,eAAC0H,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACI,cAACZ,EAAA,EAAD,CAAMC,WAAS,EAACI,MAAO,CAACC,QAAS,QAAjC,SACI,cAACtG,EAAD,CAAaG,gBAAiBsG,MAElC,cAACZ,GAAD,OAEJ,cAAC,IAAD,CAAUgB,GAAG,SAASC,SAAO,GACpC,E,qBCtBYC,GAAY,WAErB,OACI,qBAAKpK,UAAWC,KAAEoK,iBAAlB,SACI,qBAAKrK,UAAWC,KAAEqK,UAI7B,ECEYC,GAAM,WACf,IAAOrF,EAAUhG,GAAe,SAAAkJ,GAAK,OAAIA,EAAMoC,GAAV,IAA9BtF,OACP,EAAwChG,GAAe,SAAAkJ,GAAK,OAAIA,EAAMyB,IAAV,IAArDvH,EAAP,EAAOA,OAAQmI,EAAf,EAAeA,sBACT/H,EAAWtD,cAOjB,OALAqJ,qBAAU,WACN/F,EAASD,IACZ,GAAE,IAGKgI,EAEF,sBAAKzK,UAAU,MAAf,UACE,cAAC0K,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,CAASlB,MAAO,CAACmB,QAAS,OAAQC,eAAgB,iBAAlD,UACI,cAACrG,EAAA,EAAD,CAAYsG,KAAK,QAAQrG,MAAM,UAAU,aAAW,OAApD,SACI,cAACsG,EAAA,EAAD,MAGA1I,EACM,cAAC2G,EAAA,EAAD,CAAQtE,QAAS,WACfjC,EhBD5B,iDAAO,WAAOA,GAAP,2FACgBb,IADhB,OAEiB,IAFjB,OAEEe,YAAoBF,EAASL,EAAgB,CAACgF,GAAI,KAAM1G,MAAO,KAAMsK,MAAO,OAAO,IAFrF,2CAAP,sDgBEyB,EAAEvG,MAAM,UAFP,oBAGA,cAACuE,EAAA,EAAD,CAAQtE,QAAS,WAClB,EAAED,MAAM,UADP,wBAKN,YAAXQ,GAAwB,cAACgG,EAAA,EAAD,IACzB,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS9I,EAAS,cAAC,GAAD,IAAuB,cAAC,IAAD,CAAU4H,GAAG,SAASC,SAAO,MACtF,cAAC,IAAD,CAAOgB,KAAK,SAASC,QAAU9I,EAA6B,cAAC,IAAD,CAAU4H,GAAG,QAAQC,SAAO,IAAhD,cAAC,EAAD,MACxC,cAAC,IAAD,CAAOgB,KAAK,QAAQC,QAAS,cAAC,GAAD,YArBnC,cAAC,GAAD,GAwBT,E,kBC7CKC,GAAuB,CAAC,ECAxBA,GAA6B,G,mBCA7BA,GAAqB,CACvBnG,OAAQ,QCDRmG,GAAsB,CACtBhE,GAAI,KACJ1G,MAAO,KACPsK,MAAO,KACP3I,QAAQ,EACRmI,uBAAuB,G,UCCrBa,GAAcC,aAAgB,CAChC1E,MJLwB,WAA2E,IAA1EuB,EAAyE,uDAAzDiD,GAAcG,EAA2C,uCAClG,OAAQA,EAAOtK,MACX,KAAKjC,EAAa6H,UACd,OAAO,2BAAIsB,GAAX,mBAAmBoD,EAAOhJ,QAAQuC,WAAayG,EAAOhJ,QAAQqE,MAAMyB,KAAI,SAAAlB,GAAC,sBAASA,EAAT,MAC7E,KAAKnI,EAAauH,YACd,OAAO,2BACA4B,GADP,mBAEKoD,EAAOhJ,QAAQuC,WAAaqD,EAAMoD,EAAOhJ,QAAQuC,YAAYY,QAAO,SAAA1F,GAAC,OAAIA,EAAEoH,KAAOmE,EAAOhJ,QAAQ6D,MAA5B,MAE9E,KAAKpH,EAAa8J,SACd,OAAO,2BACAX,GADP,mBAEKoD,EAAOhJ,QAAQ0E,KAAKuE,WAFzB,gBAE2CD,EAAOhJ,QAAQ0E,OAF1D,oBAEoEkB,EAAMoD,EAAOhJ,QAAQ0E,KAAKuE,gBAElG,KAAKxM,EAAa0H,YACd,OAAO,2BACAyB,GADP,mBAEKoD,EAAOhJ,QAAQuC,WAAaqD,EAAMoD,EAAOhJ,QAAQuC,YAAYuD,KAAI,SAAArI,GAAC,OAAIA,EAAEoH,KAAOmE,EAAOhJ,QAAQ6D,OAAxB,2BAC7DpG,GAAMuL,EAAOhJ,QAAQkE,OAASzG,CAD2B,MAG3E,KAAKhB,EAAasG,aACd,OAAO,4BAAEiG,EAAOhJ,QAAQuC,WAAa,IAAOqD,GAChD,KAAKnJ,EAAaoG,gBAEd,cADO+C,EAAMoD,EAAOhJ,QAAQuC,YACrB,eAAIqD,GACf,KAAKnJ,EAAamK,cACd,IAAMsC,EAAS,eAAOtD,GAItB,OAHAoD,EAAOhJ,QAAQ2G,UAAUwC,SAAQ,SAACnC,GAC9BkC,EAAUlC,EAAGnC,IAAM,EACtB,IACMqE,EACX,QACI,OAAOtD,EAElB,EI5BGe,UHN4B,WAA2F,IAA1Ff,EAAyF,uDAAnEiD,GAAcG,EAAqD,uCACtH,OAAQA,EAAOtK,MACX,KAAKjC,EAAaoG,gBACd,OAAO+C,EAAMzC,QAAO,SAAA1F,GAAC,OAAIA,EAAEoH,KAAOmE,EAAOhJ,QAAQuC,UAA5B,IACzB,KAAK9F,EAAasG,aACd,MAAM,CAAE,CACJqG,UAAW,GACXC,MAAO,EACPxE,GAAImE,EAAOhJ,QAAQuC,WACnBD,MAAO0G,EAAOhJ,QAAQsC,MACtBa,OAAQ,QALZ,oBAMMyC,IACV,KAAKnJ,EAAawG,sBACd,OAAO2C,EAAME,KAAI,SAAArI,GAAC,OAAIA,EAAEoH,KAAOmE,EAAOhJ,QAAQuC,WAAxB,2BAAyC9E,GAAzC,IAA4C6E,MAAO0G,EAAOhJ,QAAQsC,QAAS7E,CAA/E,IACtB,KAAKhB,EAAa2G,uBACd,OAAOwC,EAAME,KAAI,SAAArI,GAAC,OAAIA,EAAEoH,KAAOmE,EAAOhJ,QAAQuC,WAAxB,2BAAyC9E,GAAzC,IAA4C0F,OAAQ6F,EAAOhJ,QAAQmD,SAAU1F,CAAjF,IACtB,KAAKhB,EAAamK,cACd,OAAOoC,EAAOhJ,QAAQ2G,UAAUb,KAAI,SAAAkB,GAAE,MAAK,CACvCoC,UAAW,GACXC,MAAO,EACPxE,GAAImC,EAAGnC,GACPvC,MAAO0E,EAAG1E,MACVa,OAAQ,MAL0B,IAO1C,QACI,OAAOyC,EAElB,EGpBGoC,IFLsB,WAAuE,IAAtEpC,EAAqE,uDAAvDiD,GAAcG,EAAyC,uCAC5F,OAAQA,EAAOtK,OACNjC,EAAakG,eACP,2BAAIiD,GAAX,IAAkBlD,OAAQsG,EAAOhJ,QAAQ0C,SAElCkD,CAElB,EEDGyB,KDFuB,WAAkE,IAAjEzB,EAAgE,uDAAjDiD,GAAcG,EAAmC,uCACxF,OAAQA,EAAOtK,MACX,KAAKjC,EAAasD,cACd,OAAO,uCACA6F,GACAoD,EAAOhJ,QAAQP,MAFtB,IAGIK,OAAQkJ,EAAOhJ,QAAQF,SAE/B,KAAKrD,EAAa0D,uBACd,OAAO,2BACAyF,GADP,IAEIqC,uBAAuB,IAE/B,QACI,OAAOrC,EAElB,ECbG5H,KAAMsL,OAEGC,GAAQC,aAAYV,GAAaW,aAAgBC,OAM9DrN,OAAOkN,MAAQA,G,aCbfI,IAASC,OACL,cAAC,KAAD,CAAeC,SAAUC,YAAzB,SACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGNQ,SAASC,eAAe,S7B4HxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5K,MAAK,SAAA6K,GACJA,EAAaC,YACd,IACAC,OAAM,SAAA/M,GACLgN,QAAQhN,MAAMA,EAAMiN,QACrB,G,qB8BjJPtO,EAAOC,QAAU,CAAC,WAAa,8BAA8B,MAAQ,yBAAyB,SAAW,4BAA4B,SAAW,4BAA4B,YAAc,+BAA+B,UAAY,6B,qBCArOD,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,MAAQ,6B","file":"static/js/main.36757de2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__SkzFW\",\"loader\":\"Preloader_loader__dPSfX\",\"spin\":\"Preloader_spin__27s3B\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    SET_USER_DATA = 'SET_USER_DATA',\n    INITIALIZATION_SUCCESS = 'INITIALIZATION_SUCCESS',\n\n    SET_APP_STATUS = 'SET_APP_STATUS',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n}\n","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","export const requiredField = (value: string) => value ? undefined : 'Field is required'\n\nexport const maxLength = (maxLength: number) => (value: string) => {\n    return  value.length > maxLength ? 'Max length is 10 symbols' : undefined\n}\n\n","import s from './FormsControls.module.css'\n\nexport const FormControl = ({input, meta, child, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\n}\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><input className={s.input} {...input}{...restProps}/></FormControl>\n}\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./LoginForm.module.css\";\nimport {requiredField} from \"./validators\";\nimport {Input} from \"./FormsControls/FormsControls\";\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <div className={s.LoginReduxForm}>\n            <form onSubmit={props.handleSubmit}>\n                <div className={s.email}>\n                    <Field\n                        component={Input}\n                        placeholder='Email'\n                        name='email'\n                        validate={[requiredField]}\n                    />\n                </div>\n                <div className={s.password}>\n                    <Field\n                        component={Input}\n                        placeholder='Password'\n                        name='password'\n                        type='password'\n                        validate={[requiredField]}\n                    />\n                </div>\n                <div className={s.remember}>\n                    <Field\n                        component={Input}\n                        type='checkbox'\n                        name='rememberMe'\n                    /> remember me\n                </div>\n                {\n                    props.error && <div className={s.formError}>{props.error}</div>\n                }\n                <div className={s.loginButton}>\n                    <button>Sign in</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)","import axios from \"axios\";\n\nexport const apiKey = 'f582c58f-0778-4c75-866b-da832054adf0'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data)\n    },\n}","import {stopSubmit} from \"redux-form\"\nimport {IUserData, IInitialization, ISetUserData, ThunkType} from \"../types/auth-types\"\nimport {ACTIONS_TYPE} from \"../types/action-types\";\nimport {authAPI} from \"../../api/auth-api\";\n\nexport const SetAuthUserData = (data: IUserData, isAuth: boolean): ISetUserData => ({\n    type: ACTIONS_TYPE.SET_USER_DATA,\n    payload: {data, isAuth},\n})\n\nexport const InitializationSuccess = (): IInitialization => ({\n    type: ACTIONS_TYPE.INITIALIZATION_SUCCESS\n})\n\n\nexport const FetchAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.me()\n        dispatch(InitializationSuccess())\n        data.resultCode === 0 && dispatch(SetAuthUserData(data.data, true))\n    }\n}\n\nexport const LogIn = (email: string, password: string, rememberMe: boolean = false): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.login(email, password, rememberMe)\n        data.resultCode === 0\n            ? await dispatch(FetchAuthUserData())\n            : dispatch(stopSubmit('login', {_error: data.messages}))\n    }\n}\n\nexport const LogOut = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.logout()\n        data.resultCode === 0 && dispatch(SetAuthUserData({id: null, email: null, login: null}, false))\n    }\n}\n","import React from \"react\";\nimport {FormDataType, LoginReduxForm} from \"./LoginForm\";\nimport s from './LoginForm.module.css'\nimport {LogIn} from \"../../state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\n\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const onSubmit = (formData: FormDataType) => {\n        dispatch(LogIn(formData.email, formData.password, formData.rememberMe))\n    }\n\n    return (\n        <div className={s.loginBlock}>\n            <div>\n                <span>email:</span> fatflycat@gmail.com\n                <p><span>password:</span> qwe123qwe</p>\n            </div>\n            <h1>Sign In</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}","import React from \"react\"\nimport {Login} from \"./Login\"\n\nexport const LoginContainer = () => {\n\n    return (\n        <Login/>\n    )\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ninterface IProps  {\n    addItemCallback: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(({addItemCallback}: IProps) => {\n    const [tempTitle, setTempTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onAddItem = () => {\n        if (tempTitle.trim() !== '') {\n            addItemCallback(tempTitle)\n            setTempTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && onAddItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={tempTitle}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <IconButton color='primary' onClick={onAddItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import axios from \"axios\";\nimport {IGetTodolistResponse} from \"../state/types/todolist-types\";\nimport {apiKey} from \"./auth-api\";\n\n\ntype ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<IGetTodolistResponse[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<IGetTodolistResponse>>(`todo-lists`, {title})\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<IGetTodolistResponse>>(`todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType, ISetAppStatus} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): ISetAppStatus => ({\n    type: ACTIONS_TYPE.SET_APP_STATUS,\n    payload: {status,},\n})\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    IAddTodolist,\n    IChangeTodolistFilter,\n    IChangeTodolistTitle,\n    FilterType, IGetTodolistResponse,\n    IRemoveTodolist, ISetTodolists, ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): IRemoveTodolist => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): IAddTodolist => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): IChangeTodolistTitle => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): IChangeTodolistFilter => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolistsAC = (todolists: IGetTodolistResponse[]): ISetTodolists => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolistsAC(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.deleteTodolist(todolistId)\n        data.status === 200 && dispatch(RemoveTodolistAC(todolistId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.createTodolist(title)\n        data.status === 200 && dispatch(AddTodolistAC(data.data.data.item.id, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.updateTodolist(todolistId, title)\n        data.status === 200 && dispatch(ChangeTodolistTitleAC(todolistId, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\n\n\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ninterface IProps  {\n    title: string\n    updateTitleCallback: (value: string) => void\n}\n\nexport const EditableSpan = React.memo(({title, updateTitleCallback}: IProps) => {\n    const [editMode, setEditMode] = useState(false)\n    const [tempTitle, setTempTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTempTitle(title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (tempTitle !== title){\n            updateTitleCallback(tempTitle)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13){\n            setEditMode(false)\n            updateTitleCallback(tempTitle)\n        }\n\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                size='small'\n                value={tempTitle}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{title}</span>\n    )\n})\n","import axios from \"axios\";\nimport {IGetTasksResponse, IRequestTask, ITask} from \"../state/types/task-types\";\nimport {apiKey} from \"./auth-api\";\n\nexport interface IResponse<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<IGetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<IResponse<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<IResponse<ITask>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: IRequestTask) {\n        return instance.put<IResponse<ITask>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    IAddTask,\n    IChangeTaskTitle,\n    IRemoveTask,\n    IRequestTask,\n    ISetTasks,\n    ITask,\n    ThunkType, IUpdateTask\n} from \"../types/task-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): IRemoveTask => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: ITask): IAddTask => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: IRequestTask): IChangeTaskTitle => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: ITask[]): ISetTasks => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.deleteTask(todolistId, taskId)\n        data.status === 200 && dispatch(RemoveTaskAC(todolistId, taskId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.createTask(todolistId, title)\n        data.status === 200 && dispatch(AddTaskAC(data.data.data.item))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: IUpdateTask): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: IRequestTask = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n        data.status === 200 && dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\n\ninterface IProps  {\n    todolistId: string\n    taskId: string\n    taskTitle: string\n    status: number\n}\n\nexport const Task = React.memo(({todolistId, taskId, taskTitle, status}: IProps) => {\n    const dispatch = useDispatch()\n\n    return <div\n        key={taskId}\n        className={status ? 'is-done' : ''}>\n        <Checkbox\n            color='primary'\n            checked={Boolean(status)}\n            onChange={useCallback(() => {\n                dispatch(UpdateTask(todolistId, taskId,{status: Number(!Boolean(status))}))\n            }, [dispatch, todolistId, taskId, status])}\n        />\n        <EditableSpan\n            title={taskTitle}\n            updateTitleCallback={useCallback((title) => {\n                dispatch(UpdateTask(todolistId, taskId, {title: title}))\n            }, [dispatch, todolistId, taskId])}/>\n        <IconButton\n            onClick={useCallback(() => {\n                dispatch(RemoveTask(todolistId, taskId))\n            }, [dispatch, todolistId, taskId])}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React from \"react\";\nimport {Task} from \"./Task\";\nimport {useAppSelector} from \"../../state/hooks\";\n\ninterface IProps  {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = React.memo(({todolistId, filter}: IProps) => {\n    const tasks = useAppSelector(state => state.tasks)\n\n    let tasksForTodolist = tasks[todolistId]\n    if (filter === 'active') tasksForTodolist = tasks[todolistId].filter(t => !Boolean(t.status))\n    if (filter === 'completed') tasksForTodolist = tasks[todolistId].filter(t => Boolean(t.status))\n\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={todolistId}\n                        taskId={task.id}\n                        taskTitle={task.title}\n                        status={task.status}\n                    />\n                )\n            }\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilterAC, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\n\n\ninterface IProps  {\n    todolistId: string\n    todolistTitle: string\n    filter: FilterType\n}\n\nexport const Todolist = React.memo(({todolistId, todolistTitle, filter}: IProps) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(todolistId))\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div>\n                    <h3>\n                        <EditableSpan\n                            title={todolistTitle}\n                            updateTitleCallback={useCallback((title) => {\n                                dispatch(UpdateTodolistTitle(todolistId, title))\n                            }, [dispatch, todolistId])}\n                        />\n                        <IconButton\n                            onClick={useCallback(() => {\n                                dispatch(RemoveTodolist(todolistId))\n                            }, [dispatch, todolistId])}\n                        >\n                            <Delete/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <div>\n                    <AddItemForm addItemCallback={useCallback((title: string) => {\n                        dispatch(AddTask(todolistId, title))\n                    }, [dispatch, todolistId])}\n                    />\n                </div>\n                <div>\n                    <TaskContainer todolistId={todolistId} filter={filter}/>\n                </div>\n                <div>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(todolistId, 'all'))\n                        }, [dispatch, todolistId])}\n                        className={filter === 'all' ? 'active-filter' : ''}\n                        variant={filter === 'all' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >All\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(todolistId, 'active'))\n                        }, [dispatch, todolistId])}\n                        className={filter === 'active' ? 'active-filter' : ''}\n                        variant={filter === 'active' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Active\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(todolistId, 'completed'))\n                        }, [dispatch, todolistId])}\n                        className={filter === 'completed' ? 'active-filter' : ''}\n                        variant={filter === 'completed' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})","import React, {useEffect} from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Todolist} from \"./Todolist\";\nimport {useDispatch} from \"react-redux\";\nimport {FetchTodolists} from \"../../state/actions/todolist-actions\";\nimport {useAppSelector} from \"../../state/hooks\";\n\nexport const TodolistContainer = React.memo(() => {\n    const todolists = useAppSelector(state => state.todolists)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [])\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    todolistTitle={tl.title}\n                                    filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n})","import {Container, Grid} from \"@material-ui/core\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport React, {useCallback} from \"react\";\nimport {AddTodolist} from \"../../state/actions/todolist-actions\";\nimport {TodolistContainer} from \"../Todolist/TodolistContainer\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const MainTodoContainer = () => {\n    const {isAuth} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    const onAddTodolist = useCallback((title) => {\n        dispatch(AddTodolist(title))\n    }, [dispatch])\n\n    return isAuth ? (\n        <Container fixed>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemForm addItemCallback={onAddTodolist}/>\n            </Grid>\n            <TodolistContainer/>\n        </Container>\n    ) : <Navigate to=\"/login\" replace/>\n}\n\n","import React from \"react\";\nimport s from './Preloader.module.css'\n\nexport const Preloader = () => {\n\n    return (\n        <div className={s.preloaderWrapper}>\n            <div className={s.loader}></div>\n        </div>\n    )\n\n}","import React, {useEffect} from 'react'\nimport './App.css'\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useAppSelector} from \"./state/hooks\";\nimport {LoginContainer} from \"./components/Login/LoginContainer\";\nimport {Routes, Navigate, Route} from 'react-router-dom';\nimport {MainTodoContainer} from \"./components/MainTodoContainer/MainTodoContainer\";\nimport {FetchAuthUserData, LogOut} from \"./state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\nimport {Preloader} from \"./components/Preloader/Preloader\";\n\n\nexport const App = () => {\n    const {status} = useAppSelector(state => state.app)\n    const {isAuth, initializationSuccess} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchAuthUserData())\n    }, [])\n\n\n    return !initializationSuccess\n        ? <Preloader/>\n        : <div className='App'>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    {\n                        isAuth\n                            ? <Button onClick={() => {\n                                dispatch(LogOut())\n                            }} color='inherit'>Logout</Button>\n                            : <Button onClick={() => {\n                            }} color='inherit'>Login</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress/>}\n            <Routes>\n                <Route path='/' element={isAuth ? <MainTodoContainer/> : <Navigate to=\"/login\" replace/>}/>\n                <Route path='/login' element={!isAuth ? <LoginContainer/> : <Navigate to=\"/todo\" replace/>}/>\n                <Route path='/todo' element={<MainTodoContainer/>}/>\n            </Routes>\n        </div>\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TaskReducerActionsType, ITasks} from \"../types/task-types\";\n\nconst initialState: ITasks = {}\n\nexport const tasksReducer = (state: ITasks = initialState, action: TaskReducerActionsType): ITasks => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t})) }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{...action.payload.task}, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TodolistReducerActionsType, ITodolists} from \"../types/todolist-types\";\n\nconst initialState: ITodolists[] = []\n\nexport const todolistsReducer = (state: ITodolists[] = initialState, action: TodolistReducerActionsType): ITodolists[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, filter: action.payload.filter} : s)\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all'\n            }))\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {AppReducerActionsTypes, IApp, RequestStatusType} from \"../types/app-types\";\n\nconst initialState: IApp = {\n    status: 'idle' as RequestStatusType\n}\n\nexport const appReducer = (state: IApp = initialState, action: AppReducerActionsTypes): IApp => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        default:\n            return state\n    }\n}\n\n\n","import {AuthActionsType, IAuth} from \"../types/auth-types\";\nimport {ACTIONS_TYPE} from \"../types/action-types\";\n\nlet initialState: IAuth = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    initializationSuccess: false\n}\n\nexport const authReducer = (state: IAuth = initialState, action: AuthActionsType): IAuth => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload.data,\n                isAuth: action.payload.isAuth\n            }\n        case ACTIONS_TYPE.INITIALIZATION_SUCCESS:\n            return {\n                ...state,\n                initializationSuccess: true\n            }\n        default:\n            return state\n    }\n}","import {tasksReducer} from './reducers/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app-reducer\";\nimport {authReducer} from \"./reducers/auth-reducer\";\nimport {reducer as formReducer} from 'redux-form'\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n    form: formReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"LoginForm_loginBlock__10k3k\",\"email\":\"LoginForm_email__vCrjK\",\"password\":\"LoginForm_password__MIeY2\",\"remember\":\"LoginForm_remember__2bMQ7\",\"loginButton\":\"LoginForm_loginButton__uSWb2\",\"formError\":\"LoginForm_formError__1Jki3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2AHp3\",\"error\":\"FormsControls_error__2CJ0P\",\"input\":\"FormsControls_input__3Mvap\"};"],"sourceRoot":""}