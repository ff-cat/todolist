{"version":3,"sources":["serviceWorker.ts","state/types/action-types.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Task/TaskContainer.tsx","api/todolist-api.ts","state/actions/app-actions.ts","state/actions/todolist-actions.ts","api/task-api.ts","state/actions/task-actions.ts","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","state/hooks.ts","App.tsx","state/reducers/task/tasks-reducer.ts","state/reducers/todolist/todolists-reducer.ts","state/reducers/app/app-reducer.ts","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTIONS_TYPE","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","TextField","variant","size","label","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","trim","addItem","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","useDispatch","className","status","Checkbox","checked","Delete","taskId","TaskContainer","tasks","useSelector","state","tasksForTodolist","todolistId","filter","t","map","task","id","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","post","SetAppStatus","type","SET_APP_STATUS","payload","AddTodolistAC","ADD_TODOLIST","ChangeTodolistFilterAC","CHANGE_TODOLIST_FILTER","taskAPI","SetTasksAC","SET_TASKS","Todolist","dispatch","useEffect","a","data","items","Button","useCallback","TodolistContainer","todolists","Grid","container","spacing","tl","item","Paper","style","padding","useAppSelector","App","app","SET_TODOLISTS","AppBar","position","Toolbar","display","justifyContent","edge","Menu","LinearProgress","Container","fixed","AddTodolist","initialState","rootReducer","combineReducers","action","REMOVE_TASK","s","ADD_TASK","todoListId","UPDATE_TASK","model","REMOVE_TODOLIST","stateCopy","forEach","addedDate","order","CHANGE_TODOLIST_TITLE","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f0b6365d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    SET_APP_STATUS = 'SET_APP_STATUS',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: PropsType) => {\n    const [title, setTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && addItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={title}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <IconButton color='primary' onClick={()=>{}}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    onChange: (value: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (title !== props.title){\n            props.onChange(title)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13){\n            setEditMode(false)\n            props.onChange(title)\n        }\n\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                size='small'\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\n    )\n})\n","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\n\ntype PropsType = {\n    todolistId: string\n    taskId: string\n    title: string\n    status: number\n}\n\nexport const Task = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    return <div\n        key={props.taskId}\n        className={props.status ? 'is-done' : ''}>\n        <Checkbox\n            color='primary'\n            checked={Boolean(props.status)}\n            onChange={()=>{}}\n        />\n        <EditableSpan\n            title={props.title}\n            onChange={()=>{}}/>\n        <IconButton\n            onClick={()=>{}}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {Task} from \"./Task\";\nimport {TasksType} from \"../../state/types/task-types\";\n\ntype PropsType = {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = React.memo((props: PropsType) => {\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\n\n    let tasksForTodolist = tasks[props.todolistId]\n    if (props.filter === 'active') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => !Boolean(t.status))\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => Boolean(t.status))\n    }\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={props.todolistId}\n                        taskId={task.id}\n                        title={task.title}\n                        status={task.status}\n                    />\n                )\n            }\n        </div>\n    )\n})","import axios from \"axios\";\nimport {GetTodolistResponseType} from \"../state/types/todolist-types\";\n\n\ntype ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': 'f272445b-402b-4b0f-ba99-09cb5a98a4e4'\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<GetTodolistResponseType[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<GetTodolistResponseType>>(`todo-lists`, {title})\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<GetTodolistResponseType>>(`todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): any => {\n    return {\n        type: ACTIONS_TYPE.SET_APP_STATUS,\n        payload: {status,},\n    }\n}\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    AddTodolistAT,\n    ChangeTodolistFilterAT,\n    ChangeTodolistTitleAT,\n    FilterType, GetTodolistResponseType,\n    RemoveTodolistAT, SetTodolistsAT, ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): AddTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): ChangeTodolistFilterAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolistsAC = (todolists: GetTodolistResponseType[]): SetTodolistsAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolistsAC(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.deleteTodolist(todolistId)\n        data.status === 200 && dispatch(RemoveTodolistAC(todolistId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.createTodolist(title)\n        data.status === 200 && dispatch(AddTodolistAC(data.data.data.item.id, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.updateTodolist(todolistId, title)\n        data.status === 200 && dispatch(ChangeTodolistTitleAC(todolistId, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\n\n\n\n","import axios from \"axios\";\nimport {GetTasksResponseType, RequestTaskType, TaskType} from \"../state/types/task-types\";\n\nexport type ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': 'f272445b-402b-4b0f-ba99-09cb5a98a4e4'\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: RequestTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    AddTaskAT,\n    ChangeTaskTitleAT,\n    RemoveTaskAT,\n    RequestTaskType,\n    SetTasksAT,\n    TaskType,\n    ThunkType, UpdateTaskType\n} from \"../types/task-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): RemoveTaskAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: TaskType): AddTaskAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: RequestTaskType): ChangeTaskTitleAT => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: TaskType[]): SetTasksAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.deleteTask(todolistId, taskId)\n        data.status === 200 && dispatch(RemoveTaskAC(todolistId, taskId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.createTask(todolistId, title)\n        data.status === 200 && dispatch(AddTaskAC(data.data.data.item))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: UpdateTaskType): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: RequestTaskType = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n        data.status === 200 && dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}","import React, {useCallback, useEffect} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilterAC, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\n\n\ntype PropsType = {\n    todolistId: string\n    title: string\n    filter: FilterType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(props.todolistId))\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div>\n                    <h3>\n                        <EditableSpan\n                            title={props.title}\n                            onChange={()=> {}}\n                        />\n                        <IconButton onClick={() => {\n                        }}>\n                            <Delete/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <div>\n                    <AddItemForm addItem={()=> {}}\n                    />\n                </div>\n                <div>\n                    <TaskContainer todolistId={props.todolistId} filter={props.filter}/>\n                </div>\n                <div>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'all'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'all' ? 'active-filter' : ''}\n                        variant={props.filter === 'all' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >All\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'active'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'active' ? 'active-filter' : ''}\n                        variant={props.filter === 'active' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Active\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'completed'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'completed' ? 'active-filter' : ''}\n                        variant={props.filter === 'completed' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Todolist} from \"./Todolist\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {TodolistsType} from \"../../state/types/todolist-types\";\n\nexport const TodolistContainer = React.memo(() => {\n    const todolists = useSelector<RootStateType, TodolistsType[]>(state => state.todolists)\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    title={tl.title}\n                                    filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n})","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","import React, {useCallback, useEffect} from 'react'\nimport './App.css'\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TodolistContainer} from \"./components/Todolist/TodolistContainer\";\nimport {AddTodolist, FetchTodolists} from \"./state/actions/todolist-actions\";\nimport {useAppSelector} from \"./state/hooks\";\n\n\nexport const App = () => {\n    const {status} = useAppSelector(state => state.app)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [])\n\n    return (\n        <div className='App'>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    <Button color='inherit'>Login</Button>\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress/>}\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={useCallback((title) => {\n                        dispatch(AddTodolist(title))\n                    }, [dispatch])}/>\n                </Grid>\n                <TodolistContainer/>\n            </Container>\n        </div>\n    )\n}\n\n","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {TaskReducerActionsType, TasksType} from \"../../types/task-types\";\n\nconst initialState: TasksType = {}\n\nexport const tasksReducer = (state: TasksType = initialState, action: TaskReducerActionsType): TasksType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t})) }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{...action.payload.task}, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {TodolistReducerActionsType, TodolistsType} from \"../../types/todolist-types\";\n\nconst initialState: TodolistsType[] = []\n\nexport const todolistsReducer = (state: TodolistsType[] = initialState, action: TodolistReducerActionsType): TodolistsType[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, filter: action.payload.filter} : s)\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all'\n            }))\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {AppReducerActionsTypes, AppType, RequestStatusType} from \"../../types/app-types\";\n\nconst initialState: AppType = {\n    status: 'idle' as RequestStatusType\n}\n\nexport const appReducer = (state: AppType = initialState, action: AppReducerActionsTypes): AppType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        default:\n            return state\n    }\n}\n\n\n","import {tasksReducer} from './reducers/task/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolist/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app/app-reducer\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}