{"version":3,"sources":["state/types/action-types.ts","state/hooks.ts","state/actions/app-actions.ts","state/types/app-types.ts","components/Common/ErrorSnackbar/ErrorSnackbar.tsx","components/Header/Header.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","api/settings.ts","api/task-api.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","api/todolist-api.ts","state/actions/todolist-actions.ts","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","App.tsx","state/reducers/tasks-reducer.ts","state/reducers/todolists-reducer.ts","state/reducers/app-reducer.ts","state/store.ts","index.tsx","components/Todolist/Todolist.module.css"],"names":["ACTIONS_TYPE","useAppSelector","useSelector","useAppDispatch","useDispatch","STATUS","SetAppStatus","status","type","SET_APP_STATUS","payload","SetAppError","error","SET_APP_ERROR","Alert","React","props","ref","elevation","variant","ErrorSnackbar","state","app","dispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","Header","AppBar","position","Toolbar","style","display","justifyContent","IconButton","edge","color","Menu","PENDING","className","LinearProgress","AddItemForm","memo","onAddItem","entityStatus","useState","tempTitle","setTempTitle","setError","handleAddItem","trim","TextField","disabled","size","label","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","Button","onClick","AddBox","EditableSpan","title","onUpdateTitle","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","taskAPI","todolistId","get","taskId","delete","then","res","data","post","RequestTaskObj","put","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","SetTaskEntityStatus","CHANGE_TASK_ENTITY_STATUS","UpdateTask","domainModel","getState","task","find","t","id","apiModel","description","priority","startDate","deadline","resultCode","SUCCEEDED","messages","message","IDLE","Task","taskTitle","Checkbox","checked","Boolean","useCallback","Number","RemoveTask","Delete","TaskContainer","filter","tasksForTodolist","map","todolistAPI","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitle","CHANGE_TODOLIST_TITLE","ChangeTodolistFilter","CHANGE_TODOLIST_FILTER","SetTodolistEntityStatus","CHANGE_TODOLIST_ENTITY_STATUS","Todolist","todolistTitle","useEffect","items","FetchTasks","UpdateTodolistTitle","RemoveTodolist","item","ADD_TASK","AddTask","s","filterButtonBlock","TodolistContainer","todolists","handleAddTodolist","AddTodolist","SET_TODOLISTS","Container","fixed","Grid","container","padding","spacing","tl","Paper","App","initialState","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","addedDate","order","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.6704eed7.chunk.js","sourcesContent":["export enum ACTIONS_TYPE {\n    SET_APP_STATUS = 'SET_APP_STATUS',\n    SET_APP_ERROR = 'SET_APP_ERROR',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n    CHANGE_TASK_ENTITY_STATUS = 'CHANGE_TASK_ENTITY_STATUS',\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n    CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS',\n}\n","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {STATUS, AppStatusAction, AppErrorAction} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: STATUS): AppStatusAction => ({\n    type: ACTIONS_TYPE.SET_APP_STATUS,\n    payload: {status,},\n})\n\nexport const SetAppError = (error: string | null): AppErrorAction => ({\n    type: ACTIONS_TYPE.SET_APP_ERROR,\n    payload: {error,},\n})\n\n","import {ACTIONS_TYPE} from \"./action-types\";\n\nexport enum STATUS {\n    IDLE = 'idle',\n    PENDING = 'pending',\n    SUCCEEDED = 'succeeded',\n    FAILED = 'failed',\n}\nexport interface App {\n    status: STATUS\n    error: string | null\n}\nexport interface AppStatusAction {\n    type: ACTIONS_TYPE.SET_APP_STATUS\n    payload: {\n        status: STATUS\n    }\n}\nexport interface AppErrorAction {\n    type: ACTIONS_TYPE.SET_APP_ERROR\n    payload: {\n        error: string | null\n    }\n}\n\n// export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type AppReducerActionsTypes = AppStatusAction | AppErrorAction","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useAppDispatch, useAppSelector} from \"../../../state/hooks\";\nimport {SetAppError} from \"../../../state/actions/app-actions\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n    const error = useAppSelector(state => state.app.error)\n    const dispatch = useAppDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(SetAppError(null))\n    };\n\n    return (\n        <Snackbar\n            open={!!error}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n        >\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from \"react\";\nimport {ErrorSnackbar} from \"../Common/ErrorSnackbar/ErrorSnackbar\";\nimport {AppBar, IconButton, LinearProgress, Toolbar} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {STATUS} from \"../../state/types/app-types\";\n\nexport function Header() {\n    const status = useAppSelector(state => state.app.status)\n\n    return (\n        <header>\n            <ErrorSnackbar/>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            {status === STATUS.PENDING && <div className='app-linear'><LinearProgress/></div>}\n        </header>\n    )\n}","import {memo, ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {Button, TextField} from \"@mui/material\";\nimport {AddBox} from \"@mui/icons-material\";\nimport {STATUS} from \"../../state/types/app-types\";\n\n\ninterface AddItemFormProps {\n    onAddItem: (title: string) => void\n    entityStatus?: STATUS\n}\n\nexport const AddItemForm = memo(({onAddItem, entityStatus}: AddItemFormProps) => {\n    const [tempTitle, setTempTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const handleAddItem = () => {\n        if (tempTitle.trim() !== '') {\n            onAddItem(tempTitle)\n            setTempTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && handleAddItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                disabled={entityStatus === STATUS.PENDING}\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={tempTitle}\n                error={!!error}\n                helperText={error}\n                onChange={handleInputChange}\n                onKeyPress={handleKeyPress}\n            />\n\n            <Button\n                color='primary'\n                onClick={handleAddItem}\n                disabled={entityStatus === STATUS.PENDING}\n            >\n                <AddBox/>\n            </Button>\n        </div>\n    )\n})","import {ChangeEvent, KeyboardEvent, useState, memo} from \"react\";\nimport {TextField} from \"@mui/material\";\nimport { STATUS} from \"../../state/types/app-types\";\n\ninterface EditableSpanProps {\n    title: string\n    onUpdateTitle: (value: string) => void\n    entityStatus: STATUS\n}\n\nexport const EditableSpan = memo(({title, onUpdateTitle, entityStatus}: EditableSpanProps) => {\n    const [editMode, setEditMode] = useState(false)\n    const [tempTitle, setTempTitle] = useState('')\n\n    const handleActivateEditMode = () => {\n        if (entityStatus === STATUS.PENDING) return\n        setEditMode(true)\n        setTempTitle(title)\n    }\n    const handleActivateViewMode = () => {\n        setEditMode(false)\n        if (tempTitle !== title) {\n            onUpdateTitle(tempTitle)\n        }\n    }\n    const handleTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13) {\n            setEditMode(false)\n            onUpdateTitle(tempTitle)\n        }\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                disabled={entityStatus === STATUS.PENDING}\n                size='small'\n                value={tempTitle}\n                onChange={handleTitleChange}\n                onBlur={handleActivateViewMode}\n                autoFocus\n                onKeyPress={handleKeyPress}\n            />\n            : <span onDoubleClick={handleActivateEditMode}>{title}</span>\n    )\n})\n","import axios from \"axios\";\n\nexport const apiKey = 'f272445b-402b-4b0f-ba99-09cb5a98a4e4'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})","import {GetTasksResponse, RequestTask, Task} from \"../state/types/task-types\";\nimport {instance} from \"./settings\";\n\ninterface Response<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<Response<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`).then(res=> res.data)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<Response<Task>>(`todo-lists/${todolistId}/tasks`, {title}).then(res=> res.data)\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: RequestTask) {\n        return instance.put<Response<Task>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj).then(res=> res.data)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    AddTaskAction,\n    ChangeTaskEntityStatusAction,\n    ChangeTaskTitleAction,\n    RemoveTaskAction,\n    RequestTask,\n    SetTasksAction,\n    Task,\n    ThunkType,\n    UpdateTaskData\n} from \"../types/task-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\nimport {STATUS} from \"../types/app-types\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): RemoveTaskAction => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: Task): AddTaskAction => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: RequestTask): ChangeTaskTitleAction => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: Task[]): SetTasksAction => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\nexport const SetTaskEntityStatus = (todolistId: string, taskId: string, status: STATUS): ChangeTaskEntityStatusAction => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS,\n        payload: {todolistId, taskId, status}\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus(STATUS.SUCCEEDED))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        dispatch(SetTaskEntityStatus(todolistId, taskId, STATUS.PENDING))\n        try {\n            const data = await taskAPI.deleteTask(todolistId, taskId)\n            data.resultCode === 0 && dispatch(RemoveTaskAC(todolistId, taskId))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        } finally {\n            dispatch(SetTaskEntityStatus(todolistId, taskId, STATUS.IDLE))\n        }\n\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        try {\n            const data = await taskAPI.createTask(todolistId, title)\n            if (data.resultCode === 0) {\n                dispatch(AddTaskAC(data.data.item))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        }\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: UpdateTaskData): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        dispatch(SetTaskEntityStatus(todolistId, taskId, STATUS.PENDING))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: RequestTask = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        try {\n            const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n            if (data.resultCode === 0) {\n                dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        } finally {\n            dispatch(SetTaskEntityStatus(todolistId, taskId, STATUS.IDLE))\n        }\n\n    }\n}","import {memo, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\nimport {STATUS} from \"../../state/types/app-types\";\n\ninterface TaskProps {\n    todolistId: string\n    taskId: string\n    taskTitle: string\n    status: number\n    entityStatus: STATUS\n}\n\nexport const Task = memo(({todolistId, taskId, taskTitle, status, entityStatus}: TaskProps) => {\n    const dispatch = useDispatch()\n\n    return (\n        <div key={taskId} className={status ? 'is-done' : ''}>\n            <Checkbox\n                disabled={entityStatus === STATUS.PENDING}\n                color='primary'\n                checked={Boolean(status)}\n                onChange={useCallback(() => {\n                    dispatch(UpdateTask(todolistId, taskId, {status: Number(!status)}))\n                }, [dispatch, todolistId, taskId, status])}\n            />\n            <EditableSpan\n                title={taskTitle}\n                onUpdateTitle={useCallback((title) => {\n                    dispatch(UpdateTask(todolistId, taskId, {title}))\n                }, [dispatch, todolistId, taskId])}\n                entityStatus={entityStatus}\n\n            />\n            <IconButton\n                disabled={entityStatus === STATUS.PENDING}\n                onClick={useCallback(() => {\n                    dispatch(RemoveTask(todolistId, taskId))\n                }, [dispatch, todolistId, taskId])}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})","import {memo} from \"react\";\nimport {Task} from \"./Task\";\nimport {useAppSelector} from \"../../state/hooks\";\n\ninterface TaskContainerProps  {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = memo(({todolistId, filter}: TaskContainerProps) => {\n    const tasks = useAppSelector(state => state.tasks)\n\n    let tasksForTodolist = tasks[todolistId]\n    if (filter === 'active') tasksForTodolist = tasks[todolistId].filter(t => !Boolean(t.status))\n    if (filter === 'completed') tasksForTodolist = tasks[todolistId].filter(t => Boolean(t.status))\n\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={todolistId}\n                        taskId={task.id}\n                        taskTitle={task.title}\n                        status={task.status}\n                        entityStatus={task.entityStatus}\n                    />\n                )\n            }\n        </div>\n    )\n})","import {GetTodolistResponse} from \"../state/types/todolist-types\";\nimport {instance} from \"./settings\";\n\ninterface Response<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<GetTodolistResponse[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<Response<GetTodolistResponse>>(`todo-lists`, {title}).then(res => res.data)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<Response<GetTodolistResponse>>(`todo-lists/${todolistId}`, {title}).then(res => res.data)\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<Response<{}>>(`todo-lists/${todolistId}`).then(res => res.data)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    AddTodolistAction,\n    ChangeTodolistEntityStatusAction,\n    ChangeTodolistFilterAction,\n    ChangeTodolistTitleAction,\n    FilterType,\n    GetTodolistResponse,\n    RemoveTodolistAction,\n    SetTodolistsAction,\n    ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\nimport {STATUS} from \"../types/app-types\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistAction => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): AddTodolistAction => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitle = (todolistId: string, title: string): ChangeTodolistTitleAction => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilter = (todolistId: string, filter: FilterType): ChangeTodolistFilterAction => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolists = (todolists: GetTodolistResponse[]): SetTodolistsAction => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\nexport const SetTodolistEntityStatus = (todolistId: string, status: STATUS): ChangeTodolistEntityStatusAction => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS,\n        payload: {todolistId, status}\n    }\n}\n\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolists(data.data))\n        dispatch(SetAppStatus(STATUS.SUCCEEDED))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        dispatch(SetTodolistEntityStatus(todolistId, STATUS.PENDING))\n        try {\n            const data = await todolistAPI.deleteTodolist(todolistId)\n            data.resultCode === 0 && dispatch(RemoveTodolistAC(todolistId))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            dispatch(SetTodolistEntityStatus(todolistId, STATUS.IDLE))\n        }\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        try {\n            const data = await todolistAPI.createTodolist(title)\n            if (data.resultCode === 0) {\n                dispatch(AddTodolistAC(data.data.item.id, title))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n        }\n\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus(STATUS.PENDING))\n        dispatch(SetTodolistEntityStatus(todolistId, STATUS.PENDING))\n        try {\n            const data = await todolistAPI.updateTodolist(todolistId, title)\n            data.resultCode === 0 && dispatch(ChangeTodolistTitle(todolistId, title))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            dispatch(SetTodolistEntityStatus(todolistId, STATUS.IDLE))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus(STATUS.SUCCEEDED))\n            dispatch(SetTodolistEntityStatus(todolistId, STATUS.IDLE))\n        }\n    }\n}\n\n\n\n","import {useCallback, useEffect, memo} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilter, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\nimport s from './Todolist.module.css'\nimport { STATUS} from \"../../state/types/app-types\";\n\n\ninterface TodolistProps {\n    todolistId: string\n    todolistTitle: string\n    filter: FilterType\n    entityStatus: STATUS\n}\n\nexport const Todolist = memo(({todolistId, todolistTitle, filter, entityStatus}: TodolistProps) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(todolistId))\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    <EditableSpan\n                        title={todolistTitle}\n                        onUpdateTitle={useCallback((title) => {\n                            dispatch(UpdateTodolistTitle(todolistId, title))\n                        }, [dispatch, todolistId])}\n                        entityStatus={entityStatus}\n                    />\n                    <IconButton\n                        disabled={entityStatus === STATUS.PENDING}\n                        onClick={useCallback(() => {\n                                dispatch(RemoveTodolist(todolistId))},\n                            [dispatch, todolistId])\n                        }>\n                        <Delete/>\n                    </IconButton>\n                </h3>\n            </div>\n            <div>\n                <AddItemForm\n                    onAddItem={useCallback((title: string) => {\n                            dispatch(AddTask(todolistId, title))\n                        },\n                        [dispatch, todolistId])}\n                    entityStatus={entityStatus}\n                />\n            </div>\n            <div>\n                <TaskContainer todolistId={todolistId} filter={filter}/>\n            </div>\n            <div className={s.filterButtonBlock}>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'all'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'all' ? 'active-filter' : ''}\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >All\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'active'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'active' ? 'active-filter' : ''}\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Active\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'completed'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'completed' ? 'active-filter' : ''}\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Completed\n                </Button>\n            </div>\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\";\nimport {Container, Grid, Paper} from \"@mui/material\";\nimport {Todolist} from \"./Todolist\";\nimport {useDispatch} from \"react-redux\";\nimport {AddTodolist, FetchTodolists} from \"../../state/actions/todolist-actions\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\n\nexport const TodolistContainer = () => {\n    const todolists = useAppSelector(state => state.todolists)\n    const dispatch = useDispatch()\n\n    const handleAddTodolist = useCallback((title) => {\n        dispatch(AddTodolist(title))\n    }, [dispatch])\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <Container fixed>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemForm onAddItem={handleAddTodolist}/>\n            </Grid>\n            <Grid container spacing={3}>\n                {\n                    todolists.map(tl => {\n                        return (\n                            <Grid item key={tl.id}>\n                                <Paper style={{padding: '10px'}}>\n                                    <Todolist\n                                        key={tl.id}\n                                        todolistId={tl.id}\n                                        todolistTitle={tl.title}\n                                        filter={tl.filter}\n                                        entityStatus={tl.entityStatus}\n                                    />\n                                </Paper>\n                            </Grid>\n                        )\n                    })\n                }\n            </Grid>\n        </Container>\n    )\n}","import React from 'react'\nimport './App.css'\n\nimport {Header} from \"./components/Header/Header\";\nimport {TodolistContainer} from \"./components/Todolist/TodolistContainer\";\n\n\nexport const App = () => {\n\n    return (\n        <div className='App'>\n            <Header/>\n            <TodolistContainer/>\n        </div>\n        )\n\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {Tasks, TaskReducerActionsType} from \"../types/task-types\";\nimport {STATUS} from \"../types/app-types\";\n\nconst initialState: Tasks = {}\n\nexport const tasksReducer = (state: Tasks = initialState, action: TaskReducerActionsType): Tasks => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {\n                ...state,\n                [action.payload.todolistId]: action.payload.tasks.map(t => ({...t, entityStatus: STATUS.IDLE}))\n            }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{\n                    ...action.payload.task, entityStatus: STATUS.IDLE\n                }, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        case ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, entityStatus: action.payload.status} : s)\n            }\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TodolistReducerActionsType, Todolist} from \"../types/todolist-types\";\nimport {STATUS} from \"../types/app-types\";\n\nconst initialState: Todolist[] = []\n\nexport const todolistsReducer = (state: Todolist[] = initialState, action: TodolistReducerActionsType): Todolist[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all',\n                entityStatus: STATUS.IDLE\n            }))\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all',\n                entityStatus: STATUS.IDLE\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, ...action.payload} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, entityStatus: action.payload.status} : s)\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {AppReducerActionsTypes, App, STATUS} from \"../types/app-types\";\n\nconst initialState: App = {\n    status: STATUS.IDLE,\n    error: null,\n}\n\nexport const appReducer = (state: App = initialState, action: AppReducerActionsTypes): App => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        case ACTIONS_TYPE.SET_APP_ERROR:\n            return {...state, error: action.payload.error}\n        default:\n            return state\n    }\n}\n\n\n","import {tasksReducer} from './reducers/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app-reducer\";\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    , document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterButtonBlock\":\"Todolist_filterButtonBlock__37VKL\"};"],"sourceRoot":""}