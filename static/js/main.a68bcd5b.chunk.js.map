{"version":3,"sources":["components/Preloader/Preloader.module.css","serviceWorker.ts","state/types/action-types.ts","state/hooks.ts","components/Login/validators.ts","components/Login/FormsControls/FormsControls.tsx","components/Login/LoginForm.tsx","api/auth-api.ts","state/actions/auth-actions.ts","components/Login/Login.tsx","components/Login/LoginContainer.tsx","components/AddItemForm/AddItemForm.tsx","api/todolist-api.ts","state/actions/app-actions.ts","state/actions/todolist-actions.ts","components/EditableSpan/EditableSpan.tsx","api/task-api.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","components/MainTodoContainer/MainTodoContainer.tsx","components/Preloader/Preloader.tsx","App.tsx","state/reducers/tasks-reducer.ts","state/reducers/todolists-reducer.ts","state/reducers/app-reducer.ts","state/reducers/auth-reducer.ts","state/store.ts","index.tsx","components/Login/LoginForm.module.css","components/Login/FormsControls/FormsControls.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ACTIONS_TYPE","useAppSelector","useSelector","useDispatch","requiredField","value","undefined","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","Input","restProps","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","email","Field","component","placeholder","name","validate","password","type","remember","formError","loginButton","apiKey","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","data","rememberMe","post","delete","SetAuthUserData","isAuth","SET_USER_DATA","payload","FetchAuthUserData","dispatch","INITIALIZATION_SUCCESS","resultCode","Login","loginBlock","formData","stopSubmit","_error","messages","LogIn","LoginContainer","AddItemForm","React","memo","useState","title","setTitle","setError","addItem","trim","TextField","variant","size","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","todolistAPI","todolistId","put","SetAppStatus","status","SET_APP_STATUS","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitleAC","CHANGE_TODOLIST_TITLE","ChangeTodolistFilterAC","filter","CHANGE_TODOLIST_FILTER","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","taskAPI","taskId","RequestTaskObj","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","UpdateTask","domainModel","getState","task","find","t","id","apiModel","description","priority","startDate","deadline","Task","Checkbox","checked","useCallback","Number","Delete","TaskContainer","state","tasksForTodolist","map","Todolist","useEffect","items","UpdateTodolistTitle","item","ADD_TASK","AddTask","Button","TodolistContainer","todolists","SET_TODOLISTS","Grid","container","spacing","tl","Paper","style","padding","MainTodoContainer","auth","addTodolist","AddTodolist","Container","fixed","to","replace","Preloader","preloaderWrapper","loader","App","app","initializationSuccess","AppBar","position","Toolbar","display","justifyContent","edge","Menu","login","LinearProgress","path","element","initialState","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","addedDate","order","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.a68bcd5b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__SkzFW\",\"loader\":\"Preloader_loader__dPSfX\",\"spin\":\"Preloader_spin__27s3B\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    SET_USER_DATA = 'SET_USER_DATA',\n    INITIALIZATION_SUCCESS = 'INITIALIZATION_SUCCESS',\n\n    SET_APP_STATUS = 'SET_APP_STATUS',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n}\n","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","export const requiredField = (value: string) => value ? undefined : 'Field is required'\n\nexport const maxLength = (maxLength: number) => (value: string) => {\n    return  value.length > maxLength ? 'Max length is 10 symbols' : undefined\n}\n\n","import s from './FormsControls.module.css'\n\nexport const FormControl = ({input, meta, child, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\n}\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><input className={s.input} {...input}{...restProps}/></FormControl>\n}\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./LoginForm.module.css\";\nimport {requiredField} from \"./validators\";\nimport {Input} from \"./FormsControls/FormsControls\";\n\nexport type FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <div className={s.LoginReduxForm}>\n            <form onSubmit={props.handleSubmit}>\n                <div className={s.email}>\n                    <Field\n                        component={Input}\n                        placeholder='Email'\n                        name='email'\n                        validate={[requiredField]}\n                    />\n                </div>\n                <div className={s.password}>\n                    <Field\n                        component={Input}\n                        placeholder='Password'\n                        name='password'\n                        type='password'\n                        validate={[requiredField]}\n                    />\n                </div>\n                <div className={s.remember}>\n                    <Field\n                        component={Input}\n                        type='checkbox'\n                        name='rememberMe'\n                    /> remember me\n                </div>\n                {\n                    props.error && <div className={s.formError}>{props.error}</div>\n                }\n                <div className={s.loginButton}>\n                    <button>Sign in</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)","import axios from \"axios\";\n\nexport const apiKey = 'f582c58f-0778-4c75-866b-da832054adf0'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data)\n    },\n}","import {stopSubmit} from \"redux-form\"\nimport {UserDataType, InitializationAT, SetUserDataAT, ThunkType} from \"../types/auth-types\"\nimport {ACTIONS_TYPE} from \"../types/action-types\";\nimport {authAPI} from \"../../api/auth-api\";\n\nexport const SetAuthUserData = (data: UserDataType, isAuth: boolean): SetUserDataAT => ({\n    type: ACTIONS_TYPE.SET_USER_DATA,\n    payload: {data, isAuth},\n})\n\nexport const InitializationSuccess = (): InitializationAT => ({\n    type: ACTIONS_TYPE.INITIALIZATION_SUCCESS\n})\n\n\nexport const FetchAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.me()\n        dispatch(InitializationSuccess())\n        data.resultCode === 0 && dispatch(SetAuthUserData(data.data, true))\n    }\n}\n\nexport const LogIn = (email: string, password: string, rememberMe: boolean = false): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.login(email, password, rememberMe)\n        data.resultCode === 0\n            ? await dispatch(FetchAuthUserData())\n            : dispatch(stopSubmit('login', {_error: data.messages}))\n    }\n}\n\nexport const LogOut = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.logout()\n        data.resultCode === 0 && dispatch(SetAuthUserData({id: null, email: null, login: null}, false))\n    }\n}\n","import React from \"react\";\nimport {FormDataType, LoginReduxForm} from \"./LoginForm\";\nimport s from './LoginForm.module.css'\nimport {LogIn} from \"../../state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\n\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const onSubmit = (formData: FormDataType) => {\n        dispatch(LogIn(formData.email, formData.password, formData.rememberMe))\n    }\n\n    return (\n        <div className={s.loginBlock}>\n            <div>\n                <span>email:</span> fatflycat@gmail.com\n                <p><span>password:</span> qwe123qwe</p>\n            </div>\n            <h1>Sign In</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}","import React from \"react\"\nimport {Login} from \"./Login\"\n\nexport const LoginContainer = () => {\n\n    return (\n        <Login/>\n    )\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: PropsType) => {\n    const [title, setTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && addItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={title}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <IconButton color='primary' onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import axios from \"axios\";\nimport {GetTodolistResponseType} from \"../state/types/todolist-types\";\nimport {apiKey} from \"./auth-api\";\n\n\ntype ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<GetTodolistResponseType[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<GetTodolistResponseType>>(`todo-lists`, {title})\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<GetTodolistResponseType>>(`todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType, SetAppStatusAT} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): SetAppStatusAT => ({\n    type: ACTIONS_TYPE.SET_APP_STATUS,\n    payload: {status,},\n})\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    AddTodolistAT,\n    ChangeTodolistFilterAT,\n    ChangeTodolistTitleAT,\n    FilterType, GetTodolistResponseType,\n    RemoveTodolistAT, SetTodolistsAT, ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): AddTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): ChangeTodolistFilterAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolistsAC = (todolists: GetTodolistResponseType[]): SetTodolistsAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolistsAC(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.deleteTodolist(todolistId)\n        data.status === 200 && dispatch(RemoveTodolistAC(todolistId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.createTodolist(title)\n        data.status === 200 && dispatch(AddTodolistAC(data.data.data.item.id, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.updateTodolist(todolistId, title)\n        data.status === 200 && dispatch(ChangeTodolistTitleAC(todolistId, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\n\n\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    onChange: (value: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (title !== props.title){\n            props.onChange(title)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13){\n            setEditMode(false)\n            props.onChange(title)\n        }\n\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                size='small'\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\n    )\n})\n","import axios from \"axios\";\nimport {GetTasksResponseType, RequestTaskType, TaskType} from \"../state/types/task-types\";\nimport {apiKey} from \"./auth-api\";\n\nexport type ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: RequestTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    AddTaskAT,\n    ChangeTaskTitleAT,\n    RemoveTaskAT,\n    RequestTaskType,\n    SetTasksAT,\n    TaskType,\n    ThunkType, UpdateTaskType\n} from \"../types/task-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): RemoveTaskAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: TaskType): AddTaskAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: RequestTaskType): ChangeTaskTitleAT => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: TaskType[]): SetTasksAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.deleteTask(todolistId, taskId)\n        data.status === 200 && dispatch(RemoveTaskAC(todolistId, taskId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.createTask(todolistId, title)\n        data.status === 200 && dispatch(AddTaskAC(data.data.data.item))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: UpdateTaskType): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: RequestTaskType = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n        data.status === 200 && dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\n\ntype PropsType = {\n    todolistId: string\n    taskId: string\n    title: string\n    status: number\n}\n\nexport const Task = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    return <div\n        key={props.taskId}\n        className={props.status ? 'is-done' : ''}>\n        <Checkbox\n            color='primary'\n            checked={Boolean(props.status)}\n            onChange={useCallback(() => {\n                dispatch(UpdateTask(props.todolistId, props.taskId,{status: Number(!Boolean(props.status))}))\n            }, [dispatch, props.todolistId, props.taskId, props.status])}\n        />\n        <EditableSpan\n            title={props.title}\n            onChange={useCallback((title) => {\n                dispatch(UpdateTask(props.todolistId, props.taskId, {title: title}))\n            }, [dispatch, props.todolistId, props.taskId])}/>\n        <IconButton\n            onClick={useCallback(() => {\n                dispatch(RemoveTask(props.todolistId, props.taskId))\n            }, [dispatch, props.todolistId, props.taskId])}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {Task} from \"./Task\";\nimport {TasksType} from \"../../state/types/task-types\";\n\ntype PropsType = {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = React.memo((props: PropsType) => {\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\n\n    let tasksForTodolist = tasks[props.todolistId]\n    if (props.filter === 'active') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => !Boolean(t.status))\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => Boolean(t.status))\n    }\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={props.todolistId}\n                        taskId={task.id}\n                        title={task.title}\n                        status={task.status}\n                    />\n                )\n            }\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilterAC, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\n\n\ntype PropsType = {\n    todolistId: string\n    title: string\n    filter: FilterType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(props.todolistId))\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div>\n                    <h3>\n                        <EditableSpan\n                            title={props.title}\n                            onChange={useCallback((title) => {\n                                dispatch(UpdateTodolistTitle(props.todolistId, title))\n                            }, [dispatch, props.todolistId])}\n                        />\n                        <IconButton\n                            onClick={useCallback(() => {\n                                dispatch(RemoveTodolist(props.todolistId))\n                            }, [dispatch, props.todolistId])}\n                        >\n                            <Delete/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <div>\n                    <AddItemForm addItem={useCallback((title: string) => {\n                        dispatch(AddTask(props.todolistId, title))\n                    }, [dispatch, props.todolistId])}\n                    />\n                </div>\n                <div>\n                    <TaskContainer todolistId={props.todolistId} filter={props.filter}/>\n                </div>\n                <div>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'all'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'all' ? 'active-filter' : ''}\n                        variant={props.filter === 'all' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >All\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'active'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'active' ? 'active-filter' : ''}\n                        variant={props.filter === 'active' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Active\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'completed'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'completed' ? 'active-filter' : ''}\n                        variant={props.filter === 'completed' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})","import React, {useEffect} from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Todolist} from \"./Todolist\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {TodolistsType} from \"../../state/types/todolist-types\";\nimport {FetchTodolists} from \"../../state/actions/todolist-actions\";\n\nexport const TodolistContainer = React.memo(() => {\n    const todolists = useSelector<RootStateType, TodolistsType[]>(state => state.todolists)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [])\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    title={tl.title}\n                                    filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n})","import {Container, Grid} from \"@material-ui/core\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport React, {useCallback} from \"react\";\nimport {AddTodolist} from \"../../state/actions/todolist-actions\";\nimport {TodolistContainer} from \"../Todolist/TodolistContainer\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const MainTodoContainer = () => {\n    const {isAuth} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    const addTodolist = useCallback((title) => {\n        dispatch(AddTodolist(title))\n    }, [dispatch])\n\n    return isAuth ? (\n        <Container fixed>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemForm addItem={addTodolist}/>\n            </Grid>\n            <TodolistContainer/>\n        </Container>\n    ) : <Navigate to=\"/login\" replace/>\n}\n\n","import React from \"react\";\nimport s from './Preloader.module.css'\n\nexport const Preloader = () => {\n\n    return (\n        <div className={s.preloaderWrapper}>\n            <div className={s.loader}></div>\n        </div>\n    )\n\n}","import React, {useEffect} from 'react'\nimport './App.css'\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useAppSelector} from \"./state/hooks\";\nimport {LoginContainer} from \"./components/Login/LoginContainer\";\nimport {Routes, Navigate, Route} from 'react-router-dom';\nimport {MainTodoContainer} from \"./components/MainTodoContainer/MainTodoContainer\";\nimport {FetchAuthUserData, LogOut} from \"./state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\nimport {Preloader} from \"./components/Preloader/Preloader\";\n\n\nexport const App = () => {\n    const {status} = useAppSelector(state => state.app)\n    const {isAuth, initializationSuccess} = useAppSelector(state => state.auth)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchAuthUserData())\n    }, [])\n\n\n    return !initializationSuccess\n        ? <Preloader/>\n        : <div className='App'>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    {\n                        isAuth\n                            ? <Button onClick={() => {\n                                dispatch(LogOut())\n                            }} color='inherit'>Logout</Button>\n                            : <Button onClick={() => {\n                            }} color='inherit'>Login</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress/>}\n            <Routes>\n                <Route path='/' element={isAuth ? <MainTodoContainer/> : <Navigate to=\"/login\" replace/>}/>\n                <Route path='/login' element={!isAuth ? <LoginContainer/> : <Navigate to=\"/todo\" replace/>}/>\n                <Route path='/todo' element={<MainTodoContainer/>}/>\n            </Routes>\n        </div>\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TaskReducerActionsType, TasksType} from \"../types/task-types\";\n\nconst initialState: TasksType = {}\n\nexport const tasksReducer = (state: TasksType = initialState, action: TaskReducerActionsType): TasksType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t})) }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{...action.payload.task}, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TodolistReducerActionsType, TodolistsType} from \"../types/todolist-types\";\n\nconst initialState: TodolistsType[] = []\n\nexport const todolistsReducer = (state: TodolistsType[] = initialState, action: TodolistReducerActionsType): TodolistsType[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, filter: action.payload.filter} : s)\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all'\n            }))\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {AppReducerActionsTypes, AppType, RequestStatusType} from \"../types/app-types\";\n\nconst initialState: AppType = {\n    status: 'idle' as RequestStatusType\n}\n\nexport const appReducer = (state: AppType = initialState, action: AppReducerActionsTypes): AppType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        default:\n            return state\n    }\n}\n\n\n","import {AuthActionsType, AuthType} from \"../types/auth-types\";\nimport {ACTIONS_TYPE} from \"../types/action-types\";\n\nlet initialState: AuthType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    initializationSuccess: false\n}\n\nexport const authReducer = (state: AuthType = initialState, action: AuthActionsType): AuthType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload.data,\n                isAuth: action.payload.isAuth\n            }\n        case ACTIONS_TYPE.INITIALIZATION_SUCCESS:\n            return {\n                ...state,\n                initializationSuccess: true\n            }\n        default:\n            return state\n    }\n}","import {tasksReducer} from './reducers/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app-reducer\";\nimport {authReducer} from \"./reducers/auth-reducer\";\nimport {reducer as formReducer} from 'redux-form'\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n    form: formReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"LoginForm_loginBlock__10k3k\",\"email\":\"LoginForm_email__vCrjK\",\"password\":\"LoginForm_password__MIeY2\",\"remember\":\"LoginForm_remember__2bMQ7\",\"loginButton\":\"LoginForm_loginButton__uSWb2\",\"formError\":\"LoginForm_formError__1Jki3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2AHp3\",\"error\":\"FormsControls_error__2CJ0P\",\"input\":\"FormsControls_input__3Mvap\"};"],"sourceRoot":""}