{"version":3,"sources":["components/Common/Preloader/Preloader2.module.css","components/Todolist/Todolist.module.css","state/types/action-types.ts","components/Common/Preloader/Preloader2.tsx","state/hooks.ts","state/actions/app-actions.ts","components/Common/ErrorSnackbar/ErrorSnackbar.tsx","api/auth-api.ts","state/actions/auth-actions.ts","components/Header/Header.tsx","layouts/MainLayout.tsx","components/AddItemForm/AddItemForm.tsx","api/todolist-api.ts","state/actions/todolist-actions.ts","components/EditableSpan/EditableSpan.tsx","api/task-api.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","components/MainTodoContainer/MainTodoContainer.tsx","components/Common/validators.ts","components/Login/FormsControls/FormsControls.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","components/Login/LoginContainer.tsx","App.tsx","state/reducers/tasks-reducer.ts","state/reducers/todolists-reducer.ts","state/reducers/app-reducer.ts","state/reducers/auth-reducer.ts","state/store.ts","index.tsx","components/Login/LoginForm.module.css","components/Login/FormsControls/FormsControls.module.css"],"names":["module","exports","ACTIONS_TYPE","Preloader2","className","s","preloaderWrapper","ldsRing","useAppSelector","useSelector","useAppDispatch","useDispatch","SetAppStatus","status","type","SET_APP_STATUS","payload","SetAppError","error","SET_APP_ERROR","Alert","React","props","ref","elevation","variant","ErrorSnackbar","state","app","dispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","apiKey","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","data","email","password","rememberMe","post","delete","SetAuthUserData","isAuth","SET_USER_DATA","FetchAuthUserData","INITIALIZATION_SUCCESS","resultCode","Header","auth","initializationSuccess","useEffect","AppBar","position","Toolbar","style","display","justifyContent","IconButton","edge","color","Menu","Button","onClick","id","login","LinearProgress","MainLayout","AddItemForm","memo","addItemCallback","entityStatus","useState","tempTitle","setTempTitle","setError","onAddItem","trim","TextField","disabled","size","label","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","AddBox","todolistAPI","title","todolistId","put","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitle","CHANGE_TODOLIST_TITLE","ChangeTodolistFilter","filter","CHANGE_TODOLIST_FILTER","SetTodolistEntityStatus","CHANGE_TODOLIST_ENTITY_STATUS","EditableSpan","updateTitleCallback","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","taskAPI","taskId","RequestTaskObj","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","SetTaskEntityStatus","CHANGE_TASK_ENTITY_STATUS","UpdateTask","domainModel","getState","task","find","t","apiModel","description","priority","startDate","deadline","messages","message","Task","taskTitle","Checkbox","checked","Boolean","useCallback","Number","RemoveTask","Delete","TaskContainer","items","FetchTasks","tasksForTodolist","map","Todolist","todolistTitle","setFirstRender","firstRender","UpdateTodolistTitle","RemoveTodolist","item","ADD_TASK","AddTask","filterButtonBlock","TodolistContainer","todolists","SET_TODOLISTS","Grid","container","spacing","tl","Paper","padding","MainTodoContainer","onAddTodolist","AddTodolist","Container","fixed","requiredField","undefined","FormControl","input","meta","child","hasError","touched","formControl","children","InputMU","restProps","checkboxMU","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","Field","component","placeholder","name","validate","rememberForgotPasswordBlock","remember","forgotPassword","href","formError","loginButton","Login","loginBlock","formData","stopSubmit","_error","LogIn","marginTop","opacity","LoginContainer","App","path","element","to","replace","initialState","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","addedDate","order","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.e4afc72b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader2_preloaderWrapper__2p449\",\"ldsRing\":\"Preloader2_ldsRing__1BTVq\",\"lds-ring\":\"Preloader2_lds-ring__UnlHB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterButtonBlock\":\"Todolist_filterButtonBlock__37VKL\"};","export enum ACTIONS_TYPE {\n    SET_USER_DATA = 'SET_USER_DATA',\n    INITIALIZATION_SUCCESS = 'INITIALIZATION_SUCCESS',\n\n    SET_APP_STATUS = 'SET_APP_STATUS',\n    SET_APP_ERROR = 'SET_APP_ERROR',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n    CHANGE_TASK_ENTITY_STATUS = 'CHANGE_TASK_ENTITY_STATUS',\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n    CHANGE_TODOLIST_ENTITY_STATUS = 'CHANGE_TODOLIST_ENTITY_STATUS',\n}\n","import s from './Preloader2.module.css'\n\nexport const Preloader2 = () => {\n    return (\n        <div className={s.preloaderWrapper}>\n            <div className={s.ldsRing}>\n                <div></div>\n                <div></div>\n                <div></div>\n                <div></div>\n            </div>\n        </div>\n    )\n}","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType, ISetAppStatus, ISetAppError} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): ISetAppStatus => ({\n    type: ACTIONS_TYPE.SET_APP_STATUS,\n    payload: {status,},\n})\n\nexport const SetAppError = (error: string | null): ISetAppError => ({\n    type: ACTIONS_TYPE.SET_APP_ERROR,\n    payload: {error,},\n})\n\n","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useAppDispatch, useAppSelector} from \"../../../state/hooks\";\nimport {SetAppError} from \"../../../state/actions/app-actions\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n    const {error} = useAppSelector(state => state.app)\n    const dispatch = useAppDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(SetAppError(null))\n    };\n\n    return (\n        <Snackbar\n            open={!!error}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n        >\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import axios from \"axios\";\n\nexport const apiKey = 'f272445b-402b-4b0f-ba99-09cb5a98a4e4'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data)\n    },\n}","import {stopSubmit} from \"redux-form\"\nimport {IUserData, IInitialization, ISetUserData, ThunkType} from \"../types/auth-types\"\nimport {ACTIONS_TYPE} from \"../types/action-types\";\nimport {authAPI} from \"../../api/auth-api\";\n\nexport const SetAuthUserData = (data: IUserData, isAuth: boolean): ISetUserData => ({\n    type: ACTIONS_TYPE.SET_USER_DATA,\n    payload: {data, isAuth},\n})\n\nexport const InitializationSuccess = (): IInitialization => ({\n    type: ACTIONS_TYPE.INITIALIZATION_SUCCESS\n})\n\n\nexport const FetchAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.me()\n        dispatch(InitializationSuccess())\n        data.resultCode === 0 && dispatch(SetAuthUserData(data.data, true))\n    }\n}\n\nexport const LogIn = (email: string, password: string, rememberMe: boolean = false): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.login(email, password, rememberMe)\n        data.resultCode === 0\n            ? await dispatch(FetchAuthUserData())\n            : dispatch(stopSubmit('login', {_error: data.messages}))\n    }\n}\n\nexport const LogOut = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.logout()\n        data.resultCode === 0 && dispatch(SetAuthUserData({id: null, email: null, login: null}, false))\n    }\n}\n","import {Preloader2} from \"../Common/Preloader/Preloader2\";\nimport {ErrorSnackbar} from \"../Common/ErrorSnackbar/ErrorSnackbar\";\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {FetchAuthUserData, LogOut} from \"../../state/actions/auth-actions\";\nimport React, {useEffect} from \"react\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {useDispatch} from \"react-redux\";\n\nexport function Header() {\n\n    const {status} = useAppSelector(state => state.app)\n    const {isAuth, initializationSuccess} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchAuthUserData())\n    }, [dispatch])\n\n    return !initializationSuccess\n        ? <Preloader2/>\n        : <div className='App'>\n            <ErrorSnackbar/>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    {\n                        isAuth\n                            ? <Button onClick={() => {\n                                dispatch(LogOut())\n                            }} color='inherit'>Logout</Button>\n                            : <Button onClick={() => {\n                            }} color='inherit'>Login</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <div className='app-linear'><LinearProgress/></div>}\n        </div>\n\n}","import {Header} from \"../components/Header/Header\";\nimport {Outlet} from 'react-router-dom'\n\nexport function MainLayout(){\n    return (\n        <div className=\"wrapper\">\n            <Header/>\n            <div className=\"content\">\n                <Outlet/>\n            </div>\n        </div>\n    )\n}","import  {memo, ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {Button, TextField} from \"@mui/material\";\nimport {AddBox} from \"@mui/icons-material\";\nimport {RequestStatusType} from \"../../state/types/app-types\";\n\n\ninterface IProps {\n    addItemCallback: (title: string) => void\n    entityStatus?: RequestStatusType\n}\n\nexport const AddItemForm = memo(({addItemCallback, entityStatus}: IProps) => {\n    const [tempTitle, setTempTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onAddItem = () => {\n        if (tempTitle.trim() !== '') {\n            addItemCallback(tempTitle)\n            setTempTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && onAddItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                disabled={entityStatus === 'loading'}\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={tempTitle}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <Button\n                color='primary'\n                onClick={onAddItem}\n                disabled={entityStatus === 'loading'}\n            >\n                <AddBox/>\n            </Button>\n        </div>\n    )\n})","import axios from \"axios\";\nimport {IGetTodolistResponse} from \"../state/types/todolist-types\";\nimport {apiKey} from \"./auth-api\";\n\n\ninterface IResponse<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<IGetTodolistResponse[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<IResponse<IGetTodolistResponse>>(`todo-lists`, {title}).then(res => res.data)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<IResponse<IGetTodolistResponse>>(`todo-lists/${todolistId}`, {title}).then(res => res.data)\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<IResponse<{}>>(`todo-lists/${todolistId}`).then(res => res.data)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    IAddTodolist,\n    IChangeTodolistFilter,\n    IChangeTodolistTitle,\n    FilterType, IGetTodolistResponse,\n    IRemoveTodolist, ISetTodolists, ThunkType, IChangeTodolistEntityStatus\n} from \"../types/todolist-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\nimport {RequestStatusType} from \"../types/app-types\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): IRemoveTodolist => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): IAddTodolist => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitle = (todolistId: string, title: string): IChangeTodolistTitle => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilter = (todolistId: string, filter: FilterType): IChangeTodolistFilter => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolists = (todolists: IGetTodolistResponse[]): ISetTodolists => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\nexport const SetTodolistEntityStatus = (todolistId: string, status: RequestStatusType): IChangeTodolistEntityStatus => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS,\n        payload: {todolistId, status}\n    }\n}\n\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolists(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        dispatch(SetTodolistEntityStatus(todolistId, 'loading'))\n        try {\n            const data = await todolistAPI.deleteTodolist(todolistId)\n            data.resultCode === 0 && dispatch(RemoveTodolistAC(todolistId))\n            dispatch(SetAppStatus('succeeded'))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n            dispatch(SetTodolistEntityStatus(todolistId, 'idle'))\n        }\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        try {\n            const data = await todolistAPI.createTodolist(title)\n            if (data.resultCode === 0) {\n                dispatch(AddTodolistAC(data.data.item.id, title))\n                dispatch(SetAppStatus('succeeded'))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus('succeeded'))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n        }\n\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        dispatch(SetTodolistEntityStatus(todolistId, 'loading'))\n        try {\n            const data = await todolistAPI.updateTodolist(todolistId, title)\n            data.resultCode === 0 && dispatch(ChangeTodolistTitle(todolistId, title))\n            dispatch(SetAppStatus('succeeded'))\n            dispatch(SetTodolistEntityStatus(todolistId, 'idle'))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n            dispatch(SetTodolistEntityStatus(todolistId, 'idle'))\n        }\n    }\n}\n\n\n\n","import {ChangeEvent, KeyboardEvent, useState, memo} from \"react\";\nimport {TextField} from \"@mui/material\";\nimport {RequestStatusType} from \"../../state/types/app-types\";\n\ninterface IProps {\n    title: string\n    updateTitleCallback: (value: string) => void\n    entityStatus: RequestStatusType\n}\n\nexport const EditableSpan = memo(({title, updateTitleCallback, entityStatus}: IProps) => {\n    const [editMode, setEditMode] = useState(false)\n    const [tempTitle, setTempTitle] = useState('')\n\n    const activateEditMode = () => {\n        if (entityStatus === 'loading') return\n        setEditMode(true)\n        setTempTitle(title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (tempTitle !== title) {\n            updateTitleCallback(tempTitle)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13) {\n            setEditMode(false)\n            updateTitleCallback(tempTitle)\n        }\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                disabled={entityStatus === 'loading'}\n                size='small'\n                value={tempTitle}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{title}</span>\n    )\n})\n","import axios from \"axios\";\nimport {IGetTasksResponse, IRequestTask, ITask} from \"../state/types/task-types\";\nimport {apiKey} from \"./auth-api\";\n\ninterface IResponse<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<IGetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<IResponse<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`).then(res=> res.data)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<IResponse<ITask>>(`todo-lists/${todolistId}/tasks`, {title}).then(res=> res.data)\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: IRequestTask) {\n        return instance.put<IResponse<ITask>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj).then(res=> res.data)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    IAddTask,\n    IChangeTaskTitle,\n    IRemoveTask,\n    IRequestTask,\n    ISetTasks,\n    ITask,\n    ThunkType, IUpdateTask, IChangeTaskEntityStatus\n} from \"../types/task-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\nimport {RequestStatusType} from \"../types/app-types\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): IRemoveTask => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: ITask): IAddTask => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: IRequestTask): IChangeTaskTitle => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: ITask[]): ISetTasks => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\nexport const SetTaskEntityStatus = (todolistId: string, taskId: string, status: RequestStatusType): IChangeTaskEntityStatus => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS,\n        payload: {todolistId, taskId, status}\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        dispatch(SetTaskEntityStatus(todolistId, taskId, 'loading'))\n        try {\n            const data = await taskAPI.deleteTask(todolistId, taskId)\n            data.resultCode === 0 && dispatch(RemoveTaskAC(todolistId, taskId))\n            dispatch(SetAppStatus('succeeded'))\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n        } finally {\n            dispatch(SetTaskEntityStatus(todolistId, taskId, 'idle'))\n        }\n\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        try {\n            const data = await taskAPI.createTask(todolistId, title)\n            if (data.resultCode === 0) {\n                dispatch(AddTaskAC(data.data.item))\n                dispatch(SetAppStatus('succeeded'))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus('succeeded'))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n        }\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: IUpdateTask): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        dispatch(SetTaskEntityStatus(todolistId, taskId, 'loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: IRequestTask = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        try {\n            const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n            if (data.resultCode === 0) {\n                dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n                dispatch(SetAppStatus('succeeded'))\n            } else {\n                dispatch(SetAppError(data.messages[0]))\n                dispatch(SetAppStatus('succeeded'))\n            }\n        } catch (error: any) {\n            dispatch(SetAppError(error.message))\n            dispatch(SetAppStatus('succeeded'))\n        } finally {\n            dispatch(SetTaskEntityStatus(todolistId, taskId, 'idle'))\n        }\n\n    }\n}","import {memo, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\nimport {RequestStatusType} from \"../../state/types/app-types\";\n\ninterface IProps {\n    todolistId: string\n    taskId: string\n    taskTitle: string\n    status: number\n    entityStatus: RequestStatusType\n}\n\nexport const Task = memo(({todolistId, taskId, taskTitle, status, entityStatus}: IProps) => {\n    const dispatch = useDispatch()\n\n    return (\n        <div key={taskId} className={status ? 'is-done' : ''}>\n            <Checkbox\n                disabled={entityStatus === 'loading'}\n                color='primary'\n                checked={Boolean(status)}\n                onChange={useCallback(() => {\n                    dispatch(UpdateTask(todolistId, taskId, {status: Number(!status)}))\n                }, [dispatch, todolistId, taskId, status])}\n            />\n            <EditableSpan\n                title={taskTitle}\n                updateTitleCallback={useCallback((title) => {\n                    dispatch(UpdateTask(todolistId, taskId, {title}))\n                }, [dispatch, todolistId, taskId])}\n                entityStatus={entityStatus}\n\n            />\n            <IconButton\n                disabled={entityStatus === 'loading'}\n                onClick={useCallback(() => {\n                    dispatch(RemoveTask(todolistId, taskId))\n                }, [dispatch, todolistId, taskId])}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})","import {memo, useEffect} from \"react\";\nimport {Task} from \"./Task\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {FetchTasks} from \"../../state/actions/task-actions\";\nimport {useDispatch} from \"react-redux\";\n\ninterface IProps  {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = memo(({todolistId, filter}: IProps) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(todolistId))\n    }, [])\n\n    const tasks = useAppSelector(state => state.tasks)\n\n    let tasksForTodolist = tasks[todolistId]\n    if (filter === 'active') tasksForTodolist = tasks[todolistId].filter(t => !Boolean(t.status))\n    if (filter === 'completed') tasksForTodolist = tasks[todolistId].filter(t => Boolean(t.status))\n\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={todolistId}\n                        taskId={task.id}\n                        taskTitle={task.title}\n                        status={task.status}\n                        entityStatus={task.entityStatus}\n                    />\n                )\n            }\n        </div>\n    )\n})","import {useCallback, useEffect, memo, useState} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilter, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\nimport s from './Todolist.module.css'\nimport {RequestStatusType} from \"../../state/types/app-types\";\n\n\ninterface IProps {\n    todolistId: string\n    todolistTitle: string\n    filter: FilterType\n    entityStatus: RequestStatusType\n}\n\nexport const Todolist = memo(({todolistId, todolistTitle, filter, entityStatus}: IProps) => {\n\n    useEffect(()=>{\n        setFirstRender(true)\n    },[])\n    const [firstRender, setFirstRender] = useState<boolean>(false)\n\n    const dispatch = useDispatch()\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    <EditableSpan\n                        title={todolistTitle}\n                        updateTitleCallback={useCallback((title) => {\n                            dispatch(UpdateTodolistTitle(todolistId, title))\n                        }, [dispatch, todolistId])}\n                        entityStatus={entityStatus}\n                    />\n                    <IconButton\n                        disabled={entityStatus === 'loading'}\n                        onClick={useCallback(() => {\n                                dispatch(RemoveTodolist(todolistId))\n                            },\n                            [dispatch, todolistId])\n                        }>\n                        <Delete/>\n                    </IconButton>\n                </h3>\n            </div>\n            <div>\n                <AddItemForm\n                    addItemCallback={useCallback((title: string) => {\n                            dispatch(AddTask(todolistId, title))\n                        },\n                        [dispatch, todolistId])}\n                    entityStatus={entityStatus}\n                />\n            </div>\n            <div>\n                {firstRender && <TaskContainer todolistId={todolistId} filter={filter}/>}\n            </div>\n            <div className={s.filterButtonBlock}>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'all'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'all' ? 'active-filter' : ''}\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >All\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'active'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'active' ? 'active-filter' : ''}\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Active\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilter(todolistId, 'completed'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'completed' ? 'active-filter' : ''}\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Completed\n                </Button>\n            </div>\n        </div>\n    )\n})","import React, {useEffect} from \"react\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {Todolist} from \"./Todolist\";\nimport {useDispatch} from \"react-redux\";\nimport {FetchTodolists} from \"../../state/actions/todolist-actions\";\nimport {useAppSelector} from \"../../state/hooks\";\n\nexport const TodolistContainer = () => {\n    const todolists = useAppSelector(state => state.todolists)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [dispatch])\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    todolistTitle={tl.title}\n                                    filter={tl.filter}\n                                    entityStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n}","import {Container, Grid} from \"@mui/material\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport React, {useCallback} from \"react\";\nimport {AddTodolist} from \"../../state/actions/todolist-actions\";\nimport {TodolistContainer} from \"../Todolist/TodolistContainer\";\nimport {useDispatch} from \"react-redux\";\n\nexport const MainTodoContainer = () => {\n    const dispatch = useDispatch()\n\n    const onAddTodolist = useCallback((title) => {\n        dispatch(AddTodolist(title))\n    }, [dispatch])\n\n    return (\n        <Container fixed>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemForm addItemCallback={onAddTodolist}/>\n            </Grid>\n            <TodolistContainer/>\n        </Container>\n    )\n}\n\n","export const requiredField = (value: string) => value ? undefined : 'Field is required'\n\nexport const maxLength = (maxLength: number) => (value: string) => {\n    return  value.length > maxLength ? 'Max length is 10 symbols' : undefined\n}\n\n","import s from './FormsControls.module.css'\nimport {Checkbox, TextField} from \"@mui/material\";\n\nexport const FormControl = ({input, meta, child, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\n}\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><input className={s.input} {...input}{...restProps}/></FormControl>\n}\nexport const InputMU = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><TextField className={s.input} {...input}{...restProps}/></FormControl>\n}\n\nexport const checkboxMU = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><Checkbox className={s.input} {...input}{...restProps}/></FormControl>\n}\n\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./LoginForm.module.css\";\nimport {requiredField} from \"../Common/validators\";\nimport {checkboxMU, InputMU} from \"./FormsControls/FormsControls\";\n\nexport interface IFormData {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\n\nexport const LoginForm: React.FC<InjectedFormProps<IFormData>> =\n    ({handleSubmit, error,}) => {\n        return (\n            <div className={s.LoginReduxForm}>\n                <form onSubmit={handleSubmit}>\n                    <div className={s.email}>\n                        <Field\n                            component={InputMU}\n                            placeholder='Email'\n                            name='email'\n                            validate={[requiredField]}\n                        />\n                    </div>\n                    <div className={s.password}>\n                        <Field\n                            component={InputMU}\n                            placeholder='Password'\n                            name='password'\n                            type='password'\n                            validate={[requiredField]}\n                        />\n                    </div>\n                    <div className={s.rememberForgotPasswordBlock}>\n                        <div className={s.remember}>\n                            <Field\n                                component={checkboxMU}\n                                name='rememberMe'\n                                size='small'\n                            /> Remember Me\n                        </div>\n                        <div className={s.forgotPassword}><a href=\"##\">Forgot Password?</a></div>\n                    </div>\n                    {\n                        error && <div className={s.formError}>{error}</div>\n                    }\n                    <div className={s.loginButton}>\n                        <button>SIGN IN</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\nexport const LoginReduxForm = reduxForm<IFormData>({form: 'login'})(LoginForm)","import React from \"react\";\nimport {IFormData, LoginReduxForm} from \"./LoginForm\";\nimport s from './LoginForm.module.css'\nimport {LogIn} from \"../../state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\n\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const onSubmit = (formData: IFormData) => {\n        dispatch(LogIn(formData.email, formData.password, formData.rememberMe))\n    }\n\n    return (\n        <div className={s.loginBlock}>\n            <h1>ACCOUNT LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n\n            <p style={{marginTop: '20px', opacity: '50%'}}>test account:</p>\n             <p>fatflycat@gmail.com</p>\n            <p> qwe123qwe</p>\n        </div>\n    )\n}","import React from \"react\"\nimport {Login} from \"./Login\"\n\nexport const LoginContainer = () => {\n\n    return (\n        <div>\n            <Login/>\n        </div>\n\n    )\n}\n\n\n\n","import React from 'react'\nimport './App.css'\nimport {Routes, Route, Navigate} from 'react-router-dom';\nimport {MainLayout} from \"./layouts/MainLayout\";\nimport {MainTodoContainer} from \"./components/MainTodoContainer/MainTodoContainer\";\nimport {useAppSelector} from \"./state/hooks\";\nimport {LoginContainer} from \"./components/Login/LoginContainer\";\n\n\nexport const App = () => {\n    const {isAuth} = useAppSelector(state => state.auth)\n\n    return(\n        <Routes>\n            <Route path='/' element={<MainLayout/>}>\n                <Route path=\"\" element={isAuth ? <MainTodoContainer/> : <Navigate to=\"/login\" replace/>}/>\n                <Route path=\"login\" element={!isAuth ? <LoginContainer/> : <Navigate to=\"/\" replace/>}/>\n                <Route path=\"*\" element={<h1>404: PAGE NOT FOUND</h1>}/>\n            </Route>\n        </Routes>\n    )\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {ITasks, TaskReducerActionsType} from \"../types/task-types\";\n\nconst initialState: ITasks = {}\n\nexport const tasksReducer = (state: ITasks = initialState, action: TaskReducerActionsType): ITasks => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {\n                ...state,\n                [action.payload.todolistId]: action.payload.tasks.map(t => ({...t, entityStatus: 'idle'}))\n            }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{\n                    ...action.payload.task, entityStatus: 'idle'\n                }, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        case ACTIONS_TYPE.CHANGE_TASK_ENTITY_STATUS:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, entityStatus: action.payload.status} : s)\n            }\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TodolistReducerActionsType, ITodolist} from \"../types/todolist-types\";\n\nconst initialState: ITodolist[] = []\n\nexport const todolistsReducer = (state: ITodolist[] = initialState, action: TodolistReducerActionsType): ITodolist[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all',\n                entityStatus: 'idle'\n            }))\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all',\n                entityStatus: 'idle'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, ...action.payload} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_ENTITY_STATUS:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, entityStatus: action.payload.status} : s)\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {AppReducerActionsTypes, IApp, RequestStatusType} from \"../types/app-types\";\n\nconst initialState: IApp = {\n    status: 'idle' as RequestStatusType,\n    error: null\n}\n\nexport const appReducer = (state: IApp = initialState, action: AppReducerActionsTypes): IApp => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        case ACTIONS_TYPE.SET_APP_ERROR:\n            return {...state, error: action.payload.error}\n        default:\n            return state\n    }\n}\n\n\n","import {AuthActionsType, IAuth} from \"../types/auth-types\";\nimport {ACTIONS_TYPE} from \"../types/action-types\";\n\n\nconst initialState: IAuth = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    initializationSuccess: false\n}\n\nexport const authReducer = (state: IAuth = initialState, action: AuthActionsType): IAuth => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload.data,\n                isAuth: action.payload.isAuth\n            }\n        case ACTIONS_TYPE.INITIALIZATION_SUCCESS:\n            return {\n                ...state,\n                initializationSuccess: true\n            }\n        default:\n            return state\n    }\n}","import {tasksReducer} from './reducers/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app-reducer\";\nimport {authReducer} from \"./reducers/auth-reducer\";\nimport {reducer as formReducer} from 'redux-form'\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n    form: formReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"LoginForm_loginBlock__10k3k\",\"email\":\"LoginForm_email__vCrjK\",\"password\":\"LoginForm_password__MIeY2\",\"rememberForgotPasswordBlock\":\"LoginForm_rememberForgotPasswordBlock__1qxS6\",\"remember\":\"LoginForm_remember__2bMQ7\",\"forgotPassword\":\"LoginForm_forgotPassword__2DYUD\",\"loginButton\":\"LoginForm_loginButton__uSWb2\",\"formError\":\"LoginForm_formError__1Jki3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2AHp3\",\"error\":\"FormsControls_error__2CJ0P\",\"input\":\"FormsControls_input__3Mvap\"};"],"sourceRoot":""}