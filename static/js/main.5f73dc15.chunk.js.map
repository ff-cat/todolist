{"version":3,"sources":["serviceWorker.ts","state/types/action-types.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","api/task-api.ts","state/actions/app-actions.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","api/todolist-api.ts","state/actions/todolist-actions.ts","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","state/hooks.ts","App.tsx","state/reducers/task/tasks-reducer.ts","state/reducers/todolist/todolists-reducer.ts","state/reducers/app/app-reducer.ts","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","ACTIONS_TYPE","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","size","label","value","helperText","onChange","e","currentTarget","onKeyPress","charCode","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","taskAPI","todolistId","get","taskId","delete","post","RequestTaskObj","put","SetAppStatus","status","type","SET_APP_STATUS","payload","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","UpdateTask","domainModel","dispatch","getState","a","task","find","t","id","apiModel","description","priority","startDate","deadline","Task","useDispatch","className","Checkbox","checked","useCallback","Number","Delete","TaskContainer","useSelector","state","tasksForTodolist","filter","map","todolistAPI","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitleAC","CHANGE_TODOLIST_TITLE","ChangeTodolistFilterAC","CHANGE_TODOLIST_FILTER","Todolist","useEffect","data","items","UpdateTodolistTitle","item","ADD_TASK","AddTask","Button","TodolistContainer","todolists","Grid","container","spacing","tl","Paper","style","padding","useAppSelector","App","app","SET_TODOLISTS","AppBar","position","Toolbar","display","justifyContent","edge","Menu","LinearProgress","Container","fixed","AddTodolist","initialState","rootReducer","combineReducers","action","s","todoListId","stateCopy","forEach","addedDate","order","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5f73dc15.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    SET_APP_STATUS = 'SET_APP_STATUS',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype PropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo((props: PropsType) => {\n    const [title, setTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title)\n            setTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && addItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={title}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <IconButton color='primary' onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\ntype PropsType = {\n    title: string\n    onChange: (value: string) => void\n}\n\nexport const EditableSpan = React.memo((props: PropsType) => {\n    const [editMode, setEditMode] = useState(false)\n    const [title, setTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTitle(props.title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (title !== props.title){\n            props.onChange(title)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13){\n            setEditMode(false)\n            props.onChange(title)\n        }\n\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                size='small'\n                value={title}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{props.title}</span>\n    )\n})\n","import axios from \"axios\";\nimport {GetTasksResponseType, RequestTaskType, TaskType} from \"../state/types/task-types\";\n\nexport type ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': 'f582c58f-0778-4c75-866b-da832054adf0'\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: RequestTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): any => {\n    return {\n        type: ACTIONS_TYPE.SET_APP_STATUS,\n        payload: {status,},\n    }\n}\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    AddTaskAT,\n    ChangeTaskTitleAT,\n    RemoveTaskAT,\n    RequestTaskType,\n    SetTasksAT,\n    TaskType,\n    ThunkType, UpdateTaskType\n} from \"../types/task-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): RemoveTaskAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: TaskType): AddTaskAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: RequestTaskType): ChangeTaskTitleAT => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: TaskType[]): SetTasksAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.deleteTask(todolistId, taskId)\n        data.status === 200 && dispatch(RemoveTaskAC(todolistId, taskId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.createTask(todolistId, title)\n        data.status === 200 && dispatch(AddTaskAC(data.data.data.item))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: UpdateTaskType): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: RequestTaskType = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n        data.status === 200 && dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\n\ntype PropsType = {\n    todolistId: string\n    taskId: string\n    title: string\n    status: number\n}\n\nexport const Task = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    return <div\n        key={props.taskId}\n        className={props.status ? 'is-done' : ''}>\n        <Checkbox\n            color='primary'\n            checked={Boolean(props.status)}\n            onChange={useCallback(() => {\n                dispatch(UpdateTask(props.todolistId, props.taskId,{status: Number(!Boolean(props.status))}))\n            }, [dispatch, props.todolistId, props.taskId, props.status])}\n        />\n        <EditableSpan\n            title={props.title}\n            onChange={useCallback((title) => {\n                dispatch(UpdateTask(props.todolistId, props.taskId, {title: title}))\n            }, [dispatch, props.todolistId, props.taskId])}/>\n        <IconButton\n            onClick={useCallback(() => {\n                dispatch(RemoveTask(props.todolistId, props.taskId))\n            }, [dispatch, props.todolistId, props.taskId])}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React from \"react\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {Task} from \"./Task\";\nimport {TasksType} from \"../../state/types/task-types\";\n\ntype PropsType = {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = React.memo((props: PropsType) => {\n    const tasks = useSelector<RootStateType, TasksType>(state => state.tasks)\n\n    let tasksForTodolist = tasks[props.todolistId]\n    if (props.filter === 'active') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => !Boolean(t.status))\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = tasks[props.todolistId].filter(t => Boolean(t.status))\n    }\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={props.todolistId}\n                        taskId={task.id}\n                        title={task.title}\n                        status={task.status}\n                    />\n                )\n            }\n        </div>\n    )\n})","import axios from \"axios\";\nimport {GetTodolistResponseType} from \"../state/types/todolist-types\";\n\n\ntype ResponseType<I> = {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': 'f582c58f-0778-4c75-866b-da832054adf0'\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<GetTodolistResponseType[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<GetTodolistResponseType>>(`todo-lists`, {title})\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<GetTodolistResponseType>>(`todo-lists/${todolistId}`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    AddTodolistAT,\n    ChangeTodolistFilterAT,\n    ChangeTodolistTitleAT,\n    FilterType, GetTodolistResponseType,\n    RemoveTodolistAT, SetTodolistsAT, ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): AddTodolistAT => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): ChangeTodolistTitleAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): ChangeTodolistFilterAT => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolistsAC = (todolists: GetTodolistResponseType[]): SetTodolistsAT => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolistsAC(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.deleteTodolist(todolistId)\n        data.status === 200 && dispatch(RemoveTodolistAC(todolistId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.createTodolist(title)\n        data.status === 200 && dispatch(AddTodolistAC(data.data.data.item.id, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.updateTodolist(todolistId, title)\n        data.status === 200 && dispatch(ChangeTodolistTitleAC(todolistId, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\n\n\n\n","import React, {useCallback, useEffect} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilterAC, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\n\n\ntype PropsType = {\n    todolistId: string\n    title: string\n    filter: FilterType\n}\n\nexport const Todolist = React.memo((props: PropsType) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(props.todolistId))\n    }, [])\n\n    return (\n        <div className=\"App\">\n            <div>\n                <div>\n                    <h3>\n                        <EditableSpan\n                            title={props.title}\n                            onChange={useCallback((title) => {\n                                dispatch(UpdateTodolistTitle(props.todolistId, title))\n                            }, [dispatch, props.todolistId])}\n                        />\n                        <IconButton\n                            onClick={useCallback(() => {\n                                dispatch(RemoveTodolist(props.todolistId))\n                            }, [dispatch, props.todolistId])}\n                        >\n                            <Delete/>\n                        </IconButton>\n                    </h3>\n                </div>\n                <div>\n                    <AddItemForm addItem={useCallback((title: string) => {\n                        dispatch(AddTask(props.todolistId, title))\n                    }, [dispatch, props.todolistId])}\n                    />\n                </div>\n                <div>\n                    <TaskContainer todolistId={props.todolistId} filter={props.filter}/>\n                </div>\n                <div>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'all'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'all' ? 'active-filter' : ''}\n                        variant={props.filter === 'all' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >All\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'active'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'active' ? 'active-filter' : ''}\n                        variant={props.filter === 'active' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Active\n                    </Button>\n                    <Button\n                        onClick={useCallback(() => {\n                            dispatch(ChangeTodolistFilterAC(props.todolistId, 'completed'))\n                        }, [dispatch, props.todolistId])}\n                        className={props.filter === 'completed' ? 'active-filter' : ''}\n                        variant={props.filter === 'completed' ? 'contained' : 'outlined'}\n                        size='small'\n                        color='primary'\n                    >Completed\n                    </Button>\n                </div>\n            </div>\n        </div>\n    )\n})","import React from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Todolist} from \"./Todolist\";\nimport {useSelector} from \"react-redux\";\nimport {RootStateType} from \"../../state/store\";\nimport {TodolistsType} from \"../../state/types/todolist-types\";\n\nexport const TodolistContainer = React.memo(() => {\n    const todolists = useSelector<RootStateType, TodolistsType[]>(state => state.todolists)\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    title={tl.title}\n                                    filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n})","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","import React, {useCallback, useEffect} from 'react'\nimport './App.css'\nimport {AddItemForm} from \"./components/AddItemForm/AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, LinearProgress, Toolbar} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TodolistContainer} from \"./components/Todolist/TodolistContainer\";\nimport {AddTodolist, FetchTodolists} from \"./state/actions/todolist-actions\";\nimport {useAppSelector} from \"./state/hooks\";\n\n\nexport const App = () => {\n    const {status} = useAppSelector(state => state.app)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [])\n\n    return (\n        <div className='App'>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    <Button color='inherit'>Login</Button>\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <LinearProgress/>}\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={useCallback((title) => {\n                        dispatch(AddTodolist(title))\n                    }, [dispatch])}/>\n                </Grid>\n                <TodolistContainer/>\n            </Container>\n        </div>\n    )\n}\n\n","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {TaskReducerActionsType, TasksType} from \"../../types/task-types\";\n\nconst initialState: TasksType = {}\n\nexport const tasksReducer = (state: TasksType = initialState, action: TaskReducerActionsType): TasksType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t})) }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{...action.payload.task}, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {TodolistReducerActionsType, TodolistsType} from \"../../types/todolist-types\";\n\nconst initialState: TodolistsType[] = []\n\nexport const todolistsReducer = (state: TodolistsType[] = initialState, action: TodolistReducerActionsType): TodolistsType[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, filter: action.payload.filter} : s)\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all'\n            }))\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../../types/action-types\";\nimport {AppReducerActionsTypes, AppType, RequestStatusType} from \"../../types/app-types\";\n\nconst initialState: AppType = {\n    status: 'idle' as RequestStatusType\n}\n\nexport const appReducer = (state: AppType = initialState, action: AppReducerActionsTypes): AppType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        default:\n            return state\n    }\n}\n\n\n","import {tasksReducer} from './reducers/task/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolist/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app/app-reducer\";\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n    <App />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}