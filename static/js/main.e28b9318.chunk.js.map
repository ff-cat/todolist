{"version":3,"sources":["components/Common/Preloader/Preloader.module.css","components/Login/LoginContainer.module.css","components/Todolist/Todolist.module.css","serviceWorker.ts","state/types/action-types.ts","state/hooks.ts","components/Common/validators.ts","components/Login/FormsControls/FormsControls.tsx","components/Login/LoginForm.tsx","api/auth-api.ts","state/actions/auth-actions.ts","components/Login/Login.tsx","components/Login/LoginContainer.tsx","components/AddItemForm/AddItemForm.tsx","api/todolist-api.ts","state/actions/app-actions.ts","state/actions/todolist-actions.ts","components/EditableSpan/EditableSpan.tsx","api/task-api.ts","state/actions/task-actions.ts","components/Task/Task.tsx","components/Task/TaskContainer.tsx","components/Todolist/Todolist.tsx","components/Todolist/TodolistContainer.tsx","components/MainTodoContainer/MainTodoContainer.tsx","components/Common/Preloader/Preloader.tsx","components/Common/ErrorSnackbar/ErrorSnackbar.tsx","App.tsx","state/reducers/tasks-reducer.ts","state/reducers/todolists-reducer.ts","state/reducers/app-reducer.ts","state/reducers/auth-reducer.ts","state/store.ts","index.tsx","components/Login/LoginForm.module.css","components/Login/FormsControls/FormsControls.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","ACTIONS_TYPE","useAppSelector","useSelector","useAppDispatch","useDispatch","requiredField","value","undefined","FormControl","input","meta","props","child","hasError","touched","error","className","s","formControl","children","InputMU","restProps","TextField","checkboxMU","Checkbox","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","email","Field","component","placeholder","name","validate","password","type","rememberForgotPasswordBlock","remember","size","forgotPassword","href","formError","loginButton","apiKey","instance","axios","create","withCredentials","baseURL","headers","authAPI","get","then","res","data","rememberMe","post","delete","SetAuthUserData","isAuth","SET_USER_DATA","payload","FetchAuthUserData","dispatch","INITIALIZATION_SUCCESS","resultCode","Login","loginBlock","formData","stopSubmit","_error","messages","LogIn","LoginContainer","TestAccount","testAccountBlock","AddItemForm","React","memo","addItemCallback","useState","tempTitle","setTempTitle","setError","onAddItem","trim","variant","label","helperText","onChange","e","currentTarget","onKeyPress","charCode","Button","color","onClick","AddBox","todolistAPI","title","todolistId","put","SetAppStatus","status","SET_APP_STATUS","SetAppError","SET_APP_ERROR","RemoveTodolistAC","REMOVE_TODOLIST","AddTodolistAC","ADD_TODOLIST","ChangeTodolistTitleAC","CHANGE_TODOLIST_TITLE","ChangeTodolistFilterAC","filter","CHANGE_TODOLIST_FILTER","EditableSpan","updateTitleCallback","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","taskAPI","taskId","RequestTaskObj","RemoveTaskAC","REMOVE_TASK","UpdateTaskAC","model","UPDATE_TASK","SetTasksAC","tasks","SET_TASKS","UpdateTask","domainModel","getState","task","find","t","id","apiModel","description","priority","startDate","deadline","Task","taskTitle","checked","useCallback","Number","IconButton","RemoveTask","Delete","TaskContainer","state","tasksForTodolist","map","Todolist","todolistTitle","useEffect","items","FetchTasks","UpdateTodolistTitle","RemoveTodolist","item","ADD_TASK","AddTask","filterButtonBlock","TodolistContainer","todolists","SET_TODOLISTS","Grid","container","spacing","tl","Paper","style","padding","MainTodoContainer","auth","onAddTodolist","AddTodolist","Container","fixed","to","replace","Preloader","preloaderWrapper","loader","Alert","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","App","initializationSuccess","AppBar","position","Toolbar","display","justifyContent","edge","Menu","login","LinearProgress","path","element","initialState","rootReducer","combineReducers","action","todoListId","stateCopy","forEach","addedDate","order","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e28b9318.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloaderWrapper\":\"Preloader_preloaderWrapper__3Y8Jh\",\"loader\":\"Preloader_loader__3-wOh\",\"spin\":\"Preloader_spin__3Stbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"testAccountBlock\":\"LoginContainer_testAccountBlock__3_1SK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterButtonBlock\":\"Todolist_filterButtonBlock__37VKL\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\n    SET_USER_DATA = 'SET_USER_DATA',\n    INITIALIZATION_SUCCESS = 'INITIALIZATION_SUCCESS',\n\n    SET_APP_STATUS = 'SET_APP_STATUS',\n    SET_APP_ERROR = 'SET_APP_ERROR',\n\n    REMOVE_TASK = 'REMOVE_TASK',\n    ADD_TASK = 'ADD_TASK',\n    UPDATE_TASK = 'UPDATE_TASK',\n    SET_TASKS = \"SET_TASKS\",\n\n    REMOVE_TODOLIST = 'REMOVE_TODOLIST',\n    ADD_TODOLIST = 'ADD_TODOLIST',\n    CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE',\n    CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER',\n    SET_TODOLISTS = 'SET_TODOLISTS',\n}\n","import {TypedUseSelectorHook, useDispatch, useSelector} from \"react-redux\";\nimport {AppDispatchType, RootStateType} from \"./store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootStateType> = useSelector\nexport const useAppDispatch: () => AppDispatchType = useDispatch","export const requiredField = (value: string) => value ? undefined : 'Field is required'\n\nexport const maxLength = (maxLength: number) => (value: string) => {\n    return  value.length > maxLength ? 'Max length is 10 symbols' : undefined\n}\n\n","import s from './FormsControls.module.css'\nimport {Checkbox, TextField} from \"@mui/material\";\n\nexport const FormControl = ({input, meta, child, ...props}: any) => {\n    const hasError = meta.touched && meta.error\n    return (\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\n            <div>\n                {props.children}\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl {...props}><textarea{...input} {...restProps}/></FormControl>\n}\nexport const Input = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><input className={s.input} {...input}{...restProps}/></FormControl>\n}\nexport const InputMU = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><TextField className={s.input} {...input}{...restProps}/></FormControl>\n}\n\nexport const checkboxMU = (props: any) => {\n    const {input, meta, child, ...restProps} = props\n    return <FormControl{...props}><Checkbox className={s.input} {...input}{...restProps}/></FormControl>\n}\n\n","import React from \"react\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport s from \"./LoginForm.module.css\";\nimport {requiredField} from \"../Common/validators\";\nimport {checkboxMU, InputMU} from \"./FormsControls/FormsControls\";\n\nexport interface IFormData {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\n\nexport const LoginForm: React.FC<InjectedFormProps<IFormData>> =\n    ({handleSubmit, error,}) => {\n        return (\n            <div className={s.LoginReduxForm}>\n                <form onSubmit={handleSubmit}>\n                    <div className={s.email}>\n                        <Field\n                            component={InputMU}\n                            placeholder='Email'\n                            name='email'\n                            validate={[requiredField]}\n                        />\n                    </div>\n                    <div className={s.password}>\n                        <Field\n                            component={InputMU}\n                            placeholder='Password'\n                            name='password'\n                            type='password'\n                            validate={[requiredField]}\n                        />\n                    </div>\n                    <div className={s.rememberForgotPasswordBlock}>\n                        <div className={s.remember}>\n                            <Field\n                                component={checkboxMU}\n                                name='rememberMe'\n                                size='small'\n                            /> Remember Me\n                        </div>\n                        <div className={s.forgotPassword}><a href=\"##\">Forgot Password?</a></div>\n                    </div>\n                    {\n                        error && <div className={s.formError}>{error}</div>\n                    }\n                    <div className={s.loginButton}>\n                        <button>SIGN IN</button>\n                    </div>\n                </form>\n            </div>\n        )\n    }\n\nexport const LoginReduxForm = reduxForm<IFormData>({form: 'login'})(LoginForm)","import axios from \"axios\";\n\nexport const apiKey = 'f582c58f-0778-4c75-866b-da832054adf0'\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`).then(res => res.data)\n    },\n    login(email: string, password: string, rememberMe: boolean = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe}).then(res => res.data)\n    },\n    logout() {\n        return instance.delete(`auth/login`).then(res => res.data)\n    },\n}","import {stopSubmit} from \"redux-form\"\nimport {IUserData, IInitialization, ISetUserData, ThunkType} from \"../types/auth-types\"\nimport {ACTIONS_TYPE} from \"../types/action-types\";\nimport {authAPI} from \"../../api/auth-api\";\n\nexport const SetAuthUserData = (data: IUserData, isAuth: boolean): ISetUserData => ({\n    type: ACTIONS_TYPE.SET_USER_DATA,\n    payload: {data, isAuth},\n})\n\nexport const InitializationSuccess = (): IInitialization => ({\n    type: ACTIONS_TYPE.INITIALIZATION_SUCCESS\n})\n\n\nexport const FetchAuthUserData = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.me()\n        dispatch(InitializationSuccess())\n        data.resultCode === 0 && dispatch(SetAuthUserData(data.data, true))\n    }\n}\n\nexport const LogIn = (email: string, password: string, rememberMe: boolean = false): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.login(email, password, rememberMe)\n        data.resultCode === 0\n            ? await dispatch(FetchAuthUserData())\n            : dispatch(stopSubmit('login', {_error: data.messages}))\n    }\n}\n\nexport const LogOut = (): ThunkType => {\n    return async (dispatch) => {\n        const data = await authAPI.logout()\n        data.resultCode === 0 && dispatch(SetAuthUserData({id: null, email: null, login: null}, false))\n    }\n}\n","import React from \"react\";\nimport {IFormData, LoginReduxForm} from \"./LoginForm\";\nimport s from './LoginForm.module.css'\nimport {LogIn} from \"../../state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\n\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const onSubmit = (formData: IFormData) => {\n        dispatch(LogIn(formData.email, formData.password, formData.rememberMe))\n    }\n\n    return (\n        <div className={s.loginBlock}>\n            <h1>ACCOUNT LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}","import React from \"react\"\nimport {Login} from \"./Login\"\nimport s from './LoginContainer.module.css'\n\nexport const LoginContainer = () => {\n\n    return (\n        <div>\n            <Login/>\n            <TestAccount/>\n        </div>\n\n    )\n}\n\nconst TestAccount = () => {\n    return (\n        <div className={s.testAccountBlock}>\n            <div>\n                <span>email:</span> fatflycat@gmail.com\n                <p><span>password:</span> qwe123qwe</p>\n            </div>\n        </div>\n    )\n}\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\"\nimport {Button, TextField} from \"@mui/material\";\nimport {AddBox} from \"@mui/icons-material\";\n\n\ninterface IProps  {\n    addItemCallback: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(({addItemCallback}: IProps) => {\n    const [tempTitle, setTempTitle] = useState('')\n    const [error, setError] = useState<string | null>(null)\n\n    const onAddItem = () => {\n        if (tempTitle.trim() !== '') {\n            addItemCallback(tempTitle)\n            setTempTitle('')\n        } else {\n            setError('Title is required')\n        }\n    }\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        error !== null && setError(null)\n        e.charCode === 13 && onAddItem()\n    }\n\n    return (\n        <div>\n            <TextField\n                variant='outlined'\n                size='small'\n                label='Title'\n                value={tempTitle}\n                error={!!error}\n                helperText={error}\n                onChange={onChangeHandler}\n                onKeyPress={onKeyPressHandler}\n            />\n\n            <Button color='primary' onClick={onAddItem}>\n                <AddBox/>\n            </Button>\n        </div>\n    )\n})","import axios from \"axios\";\nimport {IGetTodolistResponse} from \"../state/types/todolist-types\";\nimport {apiKey} from \"./auth-api\";\n\n\ninterface IResponse<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const todolistAPI = {\n    getTodolist() {\n        return instance.get<IGetTodolistResponse[]>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<IResponse<IGetTodolistResponse>>(`todo-lists`, {title}).then(res => res.data)\n    },\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<IResponse<IGetTodolistResponse>>(`todo-lists/${todolistId}`, {title}).then(res => res.data)\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<IResponse<{}>>(`todo-lists/${todolistId}`).then(res => res.data)\n    }\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {RequestStatusType, ISetAppStatus, ISetAppError} from \"../types/app-types\";\n\n\nexport const SetAppStatus = (status: RequestStatusType): ISetAppStatus => ({\n    type: ACTIONS_TYPE.SET_APP_STATUS,\n    payload: {status,},\n})\n\nexport const SetAppError = (error: string | null): ISetAppError => ({\n    type: ACTIONS_TYPE.SET_APP_ERROR,\n    payload: {error,},\n})\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {todolistAPI} from \"../../api/todolist-api\";\nimport {\n    IAddTodolist,\n    IChangeTodolistFilter,\n    IChangeTodolistTitle,\n    FilterType, IGetTodolistResponse,\n    IRemoveTodolist, ISetTodolists, ThunkType\n} from \"../types/todolist-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTodolistAC = (todolistId: string): IRemoveTodolist => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TODOLIST,\n        payload: {todolistId,},\n    }\n}\nexport const AddTodolistAC = (todolistId: string, title: string): IAddTodolist => {\n    return {\n        type: ACTIONS_TYPE.ADD_TODOLIST,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string): IChangeTodolistTitle => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_TITLE,\n        payload: {todolistId, title,},\n    }\n}\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: FilterType): IChangeTodolistFilter => {\n    return {\n        type: ACTIONS_TYPE.CHANGE_TODOLIST_FILTER,\n        payload: {todolistId, filter,},\n    }\n}\nexport const SetTodolistsAC = (todolists: IGetTodolistResponse[]): ISetTodolists => {\n    return {\n        type: ACTIONS_TYPE.SET_TODOLISTS,\n        payload: {todolists}\n    }\n}\n\nexport const FetchTodolists = (): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.getTodolist()\n        data.status === 200 && dispatch(SetTodolistsAC(data.data))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTodolist = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.deleteTodolist(todolistId)\n        data.resultCode === 0 && dispatch(RemoveTodolistAC(todolistId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTodolist = (title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.createTodolist(title)\n        if (data.resultCode === 0){\n            dispatch(AddTodolistAC(data.data.item.id, title))\n            dispatch(SetAppStatus('succeeded'))\n        } else {\n            dispatch(SetAppError(data.messages[0]))\n            dispatch(SetAppStatus('succeeded'))\n        }\n\n    }\n}\nexport const UpdateTodolistTitle = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await todolistAPI.updateTodolist(todolistId, title)\n        data.resultCode === 0 && dispatch(ChangeTodolistTitleAC(todolistId, title))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\n\n\n\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\nimport {TextField} from \"@mui/material\";\n\ninterface IProps  {\n    title: string\n    updateTitleCallback: (value: string) => void\n}\n\nexport const EditableSpan = React.memo(({title, updateTitleCallback}: IProps) => {\n    const [editMode, setEditMode] = useState(false)\n    const [tempTitle, setTempTitle] = useState('')\n\n    const activateEditMode = () => {\n        setEditMode(true)\n        setTempTitle(title)\n    }\n    const activateViewMode = () => {\n        setEditMode(false)\n        if (tempTitle !== title){\n            updateTitleCallback(tempTitle)\n        }\n    }\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTempTitle(e.currentTarget.value)\n    }\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.charCode === 13){\n            setEditMode(false)\n            updateTitleCallback(tempTitle)\n        }\n\n    }\n\n\n    return (\n        editMode\n            ?\n            <TextField\n                size='small'\n                value={tempTitle}\n                onChange={onChangeTitleHandler}\n                onBlur={activateViewMode}\n                autoFocus\n                onKeyPress={onKeyPressHandler}\n            />\n            : <span onDoubleClick={activateEditMode}>{title}</span>\n    )\n})\n","import axios from \"axios\";\nimport {IGetTasksResponse, IRequestTask, ITask} from \"../state/types/task-types\";\nimport {apiKey} from \"./auth-api\";\n\ninterface IResponse<I> {\n    resultCode: number\n    messages: string[]\n    fieldsErrors: string[]\n    data: {\n        item: I\n    }\n}\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        'API-KEY': apiKey\n    },\n})\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<IGetTasksResponse>(`todo-lists/${todolistId}/tasks`)\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<IResponse<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`).then(res=> res.data)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<IResponse<ITask>>(`todo-lists/${todolistId}/tasks`, {title}).then(res=> res.data)\n    },\n    updateTask(todolistId: string, taskId: string, RequestTaskObj: IRequestTask) {\n        return instance.put<IResponse<ITask>>(`todo-lists/${todolistId}/tasks/${taskId}`, RequestTaskObj).then(res=> res.data)\n    },\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {taskAPI} from \"../../api/task-api\";\nimport {RootStateType} from \"../store\";\nimport {\n    IAddTask,\n    IChangeTaskTitle,\n    IRemoveTask,\n    IRequestTask,\n    ISetTasks,\n    ITask,\n    ThunkType, IUpdateTask\n} from \"../types/task-types\";\nimport {SetAppError, SetAppStatus} from \"./app-actions\";\n\n\nexport const RemoveTaskAC = (todolistId: string, taskId: string): IRemoveTask => {\n    return {\n        type: ACTIONS_TYPE.REMOVE_TASK,\n        payload: {todolistId, taskId,},\n    }\n}\nexport const AddTaskAC = (task: ITask): IAddTask => {\n    return {\n        type: ACTIONS_TYPE.ADD_TASK,\n        payload: {task},\n    }\n}\nexport const UpdateTaskAC = (todolistId: string, taskId: string, model: IRequestTask): IChangeTaskTitle => {\n    return {\n        type: ACTIONS_TYPE.UPDATE_TASK,\n        payload: {todolistId, taskId, model,},\n    }\n}\nexport const SetTasksAC = (todolistId: string, tasks: ITask[]): ISetTasks => {\n    return {\n        type: ACTIONS_TYPE.SET_TASKS,\n        payload: {todolistId, tasks},\n    }\n}\n\n\nexport const FetchTasks = (todolistId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.getTasks(todolistId)\n        data.status === 200 && dispatch(SetTasksAC(todolistId, data.data.items))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const RemoveTask = (todolistId: string, taskId: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.deleteTask(todolistId, taskId)\n        data.resultCode === 0 && dispatch(RemoveTaskAC(todolistId, taskId))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}\nexport const AddTask = (todolistId: string, title: string): ThunkType => {\n    return async (dispatch) => {\n        dispatch(SetAppStatus('loading'))\n        const data = await taskAPI.createTask(todolistId, title)\n        if (data.resultCode === 0) {\n            dispatch(AddTaskAC(data.data.item))\n            dispatch(SetAppStatus('succeeded'))\n        } else {\n            dispatch(SetAppError(data.messages[0]))\n            dispatch(SetAppStatus('succeeded'))\n        }\n    }\n}\nexport const UpdateTask = (todolistId: string, taskId: string, domainModel: IUpdateTask): ThunkType => {\n    return async (dispatch, getState: () => RootStateType) => {\n        dispatch(SetAppStatus('loading'))\n        const task = getState().tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            return\n        }\n        const apiModel: IRequestTask = {\n            title: task.title,\n            description: task.description,\n            status: task.status,\n            priority: task.priority,\n            startDate: task.startDate,\n            deadline: task.deadline,\n            ...domainModel\n        }\n        const data = await taskAPI.updateTask(todolistId, taskId, apiModel)\n        data.resultCode === 0 && dispatch(UpdateTaskAC(todolistId, taskId, apiModel))\n        dispatch(SetAppStatus('succeeded'))\n    }\n}","import React, {useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@mui/material\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {RemoveTask, UpdateTask} from \"../../state/actions/task-actions\";\n\ninterface IProps {\n    todolistId: string\n    taskId: string\n    taskTitle: string\n    status: number\n}\n\nexport const Task = React.memo(({todolistId, taskId, taskTitle, status}: IProps) => {\n    const dispatch = useDispatch()\n\n    return (\n        <div key={taskId} className={status ? 'is-done' : ''}>\n            <Checkbox\n                color='primary'\n                checked={Boolean(status)}\n                onChange={useCallback(() => {\n                    dispatch(UpdateTask(todolistId, taskId, {status: Number(!status)}))\n                }, [dispatch, todolistId, taskId, status])}\n            />\n            <EditableSpan\n                title={taskTitle}\n                updateTitleCallback={useCallback((title) => {\n                    dispatch(UpdateTask(todolistId, taskId, {title: title}))\n                }, [dispatch, todolistId, taskId])}/>\n            <IconButton\n                onClick={useCallback(() => {\n                    dispatch(RemoveTask(todolistId, taskId))\n                }, [dispatch, todolistId, taskId])}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})","import React from \"react\";\nimport {Task} from \"./Task\";\nimport {useAppSelector} from \"../../state/hooks\";\n\ninterface IProps  {\n    todolistId: string\n    filter: string\n}\n\nexport const TaskContainer = React.memo(({todolistId, filter}: IProps) => {\n    const tasks = useAppSelector(state => state.tasks)\n\n    let tasksForTodolist = tasks[todolistId]\n    if (filter === 'active') tasksForTodolist = tasks[todolistId].filter(t => !Boolean(t.status))\n    if (filter === 'completed') tasksForTodolist = tasks[todolistId].filter(t => Boolean(t.status))\n\n    return (\n        <div>\n            {\n                tasksForTodolist.map(task =>\n                    <Task\n                        key={task.id}\n                        todolistId={todolistId}\n                        taskId={task.id}\n                        taskTitle={task.title}\n                        status={task.status}\n                    />\n                )\n            }\n        </div>\n    )\n})","import React, {useCallback, useEffect} from \"react\"\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@mui/material\";\nimport {Delete} from \"@mui/icons-material\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskContainer} from \"../Task/TaskContainer\";\nimport {ChangeTodolistFilterAC, RemoveTodolist, UpdateTodolistTitle,} from \"../../state/actions/todolist-actions\";\nimport {AddTask, FetchTasks} from \"../../state/actions/task-actions\";\nimport {FilterType} from \"../../state/types/todolist-types\";\nimport s from './Todolist.module.css'\n\n\ninterface IProps {\n    todolistId: string\n    todolistTitle: string\n    filter: FilterType\n}\n\nexport const Todolist = React.memo(({todolistId, todolistTitle, filter}: IProps) => {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTasks(todolistId))\n    }, [])\n\n    return (\n        <div>\n            <div>\n                <h3>\n                    <EditableSpan\n                        title={todolistTitle}\n                        updateTitleCallback={useCallback((title) => {\n                            dispatch(UpdateTodolistTitle(todolistId, title))\n                        }, [dispatch, todolistId])}\n                    />\n                    <IconButton\n                        onClick={useCallback(() => {\n                            dispatch(RemoveTodolist(todolistId))\n                        }, [dispatch, todolistId])}\n                    >\n                        <Delete/>\n                    </IconButton>\n                </h3>\n            </div>\n            <div>\n                <AddItemForm addItemCallback={useCallback((title: string) => {\n                    dispatch(AddTask(todolistId, title))\n                }, [dispatch, todolistId])}\n                />\n            </div>\n            <div>\n                <TaskContainer todolistId={todolistId} filter={filter}/>\n            </div>\n            <div className={s.filterButtonBlock}>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilterAC(todolistId, 'all'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'all' ? 'active-filter' : ''}\n                    variant={filter === 'all' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >All\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilterAC(todolistId, 'active'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'active' ? 'active-filter' : ''}\n                    variant={filter === 'active' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Active\n                </Button>\n                <Button\n                    onClick={useCallback(() => {\n                        dispatch(ChangeTodolistFilterAC(todolistId, 'completed'))\n                    }, [dispatch, todolistId])}\n                    className={filter === 'completed' ? 'active-filter' : ''}\n                    variant={filter === 'completed' ? 'contained' : 'outlined'}\n                    size='small'\n                    color='primary'\n                >Completed\n                </Button>\n            </div>\n        </div>\n    )\n})","import React, {useEffect} from \"react\";\nimport {Grid, Paper} from \"@mui/material\";\nimport {Todolist} from \"./Todolist\";\nimport {useDispatch} from \"react-redux\";\nimport {FetchTodolists} from \"../../state/actions/todolist-actions\";\nimport {useAppSelector} from \"../../state/hooks\";\n\nexport const TodolistContainer = () => {\n    const todolists = useAppSelector(state => state.todolists)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchTodolists())\n    }, [])\n\n    return (\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    return (\n                        <Grid item key={tl.id}>\n                            <Paper style={{padding: '10px'}}>\n                                <Todolist\n                                    key={tl.id}\n                                    todolistId={tl.id}\n                                    todolistTitle={tl.title}\n                                    filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    )\n                })\n            }\n        </Grid>\n    )\n}","import {Container, Grid} from \"@mui/material\";\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\nimport React, {useCallback} from \"react\";\nimport {AddTodolist} from \"../../state/actions/todolist-actions\";\nimport {TodolistContainer} from \"../Todolist/TodolistContainer\";\nimport {useDispatch} from \"react-redux\";\nimport {useAppSelector} from \"../../state/hooks\";\nimport {Navigate} from \"react-router-dom\";\n\nexport const MainTodoContainer = () => {\n    const {isAuth} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    const onAddTodolist = useCallback((title) => {\n        dispatch(AddTodolist(title))\n    }, [dispatch])\n\n    return isAuth ? (\n        <Container fixed>\n            <Grid container style={{padding: '20px'}}>\n                <AddItemForm addItemCallback={onAddTodolist}/>\n            </Grid>\n            <TodolistContainer/>\n        </Container>\n    ) : <Navigate to=\"/login\" replace/>\n}\n\n","import React from \"react\";\nimport s from './Preloader.module.css'\n\nexport const Preloader = () => {\n\n    return (\n        <div className={s.preloaderWrapper}>\n            <div className={s.loader}>\n\n            </div>\n        </div>\n    )\n\n}","import * as React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\nimport {useAppDispatch, useAppSelector} from \"../../../state/hooks\";\nimport {SetAppError} from \"../../../state/actions/app-actions\";\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props,\n    ref,\n) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nexport const ErrorSnackbar = () => {\n    const {error} = useAppSelector(state => state.app)\n    const dispatch = useAppDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(SetAppError(null))\n    };\n\n    return (\n        <Snackbar\n            open={!!error}\n            autoHideDuration={6000}\n            onClose={handleClose}\n            anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\n        >\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React, {useEffect} from 'react'\nimport './App.css'\nimport {useAppSelector} from \"./state/hooks\";\nimport {LoginContainer} from \"./components/Login/LoginContainer\";\nimport {Routes, Navigate, Route} from 'react-router-dom';\nimport {MainTodoContainer} from \"./components/MainTodoContainer/MainTodoContainer\";\nimport {FetchAuthUserData, LogOut} from \"./state/actions/auth-actions\";\nimport {useDispatch} from \"react-redux\";\nimport {Preloader} from \"./components/Common/Preloader/Preloader\";\nimport {AppBar, Button, IconButton, LinearProgress, Toolbar} from \"@mui/material\";\nimport {Menu} from \"@mui/icons-material\";\nimport {ErrorSnackbar} from \"./components/Common/ErrorSnackbar/ErrorSnackbar\";\n\n\nexport const App = () => {\n    const {status} = useAppSelector(state => state.app)\n    const {isAuth, initializationSuccess} = useAppSelector(state => state.auth)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(FetchAuthUserData())\n    }, [])\n\n\n    return !initializationSuccess\n        ? <Preloader/>\n        : <div className='App'>\n            <ErrorSnackbar/>\n            <AppBar position='static'>\n                <Toolbar style={{display: 'flex', justifyContent: 'space-between'}}>\n                    <IconButton edge='start' color='inherit' aria-label='menu'>\n                        <Menu/>\n                    </IconButton>\n                    {\n                        isAuth\n                            ? <Button onClick={() => {\n                                dispatch(LogOut())\n                            }} color='inherit'>Logout</Button>\n                            : <Button onClick={() => {\n                            }} color='inherit'>Login</Button>\n                    }\n                </Toolbar>\n            </AppBar>\n            {status === 'loading' && <div className='app-linear'><LinearProgress/></div>}\n            <Routes>\n                <Route path='/' element={isAuth ? <MainTodoContainer/> : <Navigate to=\"/login\" replace/>}/>\n                <Route path='/login' element={!isAuth ? <LoginContainer/> : <Navigate to=\"/todo\" replace/>}/>\n                <Route path='/todo' element={<MainTodoContainer/>}/>\n            </Routes>\n        </div>\n}\n\n","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TaskReducerActionsType, ITasks} from \"../types/task-types\";\n\nconst initialState: ITasks = {}\n\nexport const tasksReducer = (state: ITasks = initialState, action: TaskReducerActionsType): ITasks => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_TASKS:\n            return {...state, [action.payload.todolistId]: action.payload.tasks.map(t => ({...t})) }\n        case ACTIONS_TYPE.REMOVE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].filter(s => s.id !== action.payload.taskId)\n            }\n        case ACTIONS_TYPE.ADD_TASK:\n            return {\n                ...state,\n                [action.payload.task.todoListId]: [{...action.payload.task}, ...state[action.payload.task.todoListId]]\n            }\n        case ACTIONS_TYPE.UPDATE_TASK:\n            return {\n                ...state,\n                [action.payload.todolistId]: state[action.payload.todolistId].map(s => s.id === action.payload.taskId\n                    ? {...s, ...action.payload.model} : s)\n            }\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return {[action.payload.todolistId]: [], ...state}\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            delete state[action.payload.todolistId]\n            return {...state}\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            const stateCopy = {...state}\n            action.payload.todolists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy;\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {TodolistReducerActionsType, ITodolists} from \"../types/todolist-types\";\n\nconst initialState: ITodolists[] = []\n\nexport const todolistsReducer = (state: ITodolists[] = initialState, action: TodolistReducerActionsType): ITodolists[] => {\n    switch (action.type) {\n        case ACTIONS_TYPE.REMOVE_TODOLIST:\n            return state.filter(s => s.id !== action.payload.todolistId)\n        case ACTIONS_TYPE.ADD_TODOLIST:\n            return [{\n                addedDate: '',\n                order: 0,\n                id: action.payload.todolistId,\n                title: action.payload.title,\n                filter: 'all'\n            }, ...state]\n        case ACTIONS_TYPE.CHANGE_TODOLIST_TITLE:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, title: action.payload.title} : s)\n        case ACTIONS_TYPE.CHANGE_TODOLIST_FILTER:\n            return state.map(s => s.id === action.payload.todolistId ? {...s, filter: action.payload.filter} : s)\n        case ACTIONS_TYPE.SET_TODOLISTS:\n            return action.payload.todolists.map(tl => ({\n                addedDate: '',\n                order: 0,\n                id: tl.id,\n                title: tl.title,\n                filter: 'all'\n            }))\n        default:\n            return state\n    }\n}","import {ACTIONS_TYPE} from \"../types/action-types\";\nimport {AppReducerActionsTypes, IApp, RequestStatusType} from \"../types/app-types\";\n\nconst initialState: IApp = {\n    status: 'idle' as RequestStatusType,\n    error: null\n}\n\nexport const appReducer = (state: IApp = initialState, action: AppReducerActionsTypes): IApp => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_APP_STATUS:\n            return {...state, status: action.payload.status}\n        case ACTIONS_TYPE.SET_APP_ERROR:\n            return {...state, error: action.payload.error}\n        default:\n            return state\n    }\n}\n\n\n","import {AuthActionsType, IAuth} from \"../types/auth-types\";\nimport {ACTIONS_TYPE} from \"../types/action-types\";\n\n\nconst initialState: IAuth = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    initializationSuccess: false\n}\n\nexport const authReducer = (state: IAuth = initialState, action: AuthActionsType): IAuth => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload.data,\n                isAuth: action.payload.isAuth\n            }\n        case ACTIONS_TYPE.INITIALIZATION_SUCCESS:\n            return {\n                ...state,\n                initializationSuccess: true\n            }\n        default:\n            return state\n    }\n}","import {tasksReducer} from './reducers/tasks-reducer';\nimport {todolistsReducer} from './reducers/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {appReducer} from \"./reducers/app-reducer\";\nimport {authReducer} from \"./reducers/auth-reducer\";\nimport {reducer as formReducer} from 'redux-form'\n\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer,\n    form: formReducer,\n})\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type RootStateType = ReturnType<typeof store.getState>\nexport type AppDispatchType = typeof store.dispatch\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from \"./App\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"LoginForm_loginBlock__10k3k\",\"email\":\"LoginForm_email__vCrjK\",\"password\":\"LoginForm_password__MIeY2\",\"rememberForgotPasswordBlock\":\"LoginForm_rememberForgotPasswordBlock__1qxS6\",\"remember\":\"LoginForm_remember__2bMQ7\",\"forgotPassword\":\"LoginForm_forgotPassword__2DYUD\",\"loginButton\":\"LoginForm_loginButton__uSWb2\",\"formError\":\"LoginForm_formError__1Jki3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2AHp3\",\"error\":\"FormsControls_error__2CJ0P\",\"input\":\"FormsControls_input__3Mvap\"};"],"sourceRoot":""}